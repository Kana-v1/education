
f303xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000077c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000910  08000918  00010918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000910  08000910  00010918  2**0
                  CONTENTS
  4 .ARM          00000000  08000910  08000910  00010918  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000910  08000918  00010918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000910  08000910  00010910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000914  08000914  00010914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010918  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010918  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009c9  00000000  00000000  00010948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000239  00000000  00000000  00011311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00011550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  00011618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001350  00000000  00000000  000116b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000db5  00000000  00000000  00012a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005159  00000000  00000000  000137bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00018916  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000268  00000000  00000000  00018968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080008f8 	.word	0x080008f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080008f8 	.word	0x080008f8

080001d4 <main>:

void delay(void) {
	for (uint32_t i = 0; i < 500000 / 2; i++);
}

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLED, GPIOBtn;
	GpioLED.pGPIOX = GPIOE;
 80001da:	4b19      	ldr	r3, [pc, #100]	; (8000240 <main+0x6c>)
 80001dc:	60fb      	str	r3, [r7, #12]
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 80001de:	230b      	movs	r3, #11
 80001e0:	743b      	strb	r3, [r7, #16]
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 80001e2:	2301      	movs	r3, #1
 80001e4:	747b      	strb	r3, [r7, #17]
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001e6:	2302      	movs	r3, #2
 80001e8:	74bb      	strb	r3, [r7, #18]
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	753b      	strb	r3, [r7, #20]
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOE, ENABLE);
 80001f2:	2101      	movs	r1, #1
 80001f4:	4812      	ldr	r0, [pc, #72]	; (8000240 <main+0x6c>)
 80001f6:	f000 f9d3 	bl	80005a0 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLED);
 80001fa:	f107 030c 	add.w	r3, r7, #12
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f858 	bl	80002b4 <GPIO_Init>

	GPIOBtn.pGPIOX = GPIOA;
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800020a:	2300      	movs	r3, #0
 800020c:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 800020e:	2305      	movs	r3, #5
 8000210:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000216:	2300      	movs	r3, #0
 8000218:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 800021a:	2101      	movs	r1, #1
 800021c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000220:	f000 f9be 	bl	80005a0 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 8000224:	463b      	mov	r3, r7
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f844 	bl	80002b4 <GPIO_Init>

	// IRQ configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRIO12);
 800022c:	210c      	movs	r1, #12
 800022e:	2006      	movs	r0, #6
 8000230:	f000 faf0 	bl	8000814 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 8000234:	2101      	movs	r1, #1
 8000236:	2006      	movs	r0, #6
 8000238:	f000 fa66 	bl	8000708 <GPIO_IRQInterruptConfig>


	while(1);
 800023c:	e7fe      	b.n	800023c <main+0x68>
 800023e:	bf00      	nop
 8000240:	48001000 	.word	0x48001000

08000244 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void) {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fb11 	bl	8000870 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOE, GPIO_PIN_NO_11);
 800024e:	210b      	movs	r1, #11
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <EXTI0_IRQHandler+0x18>)
 8000252:	f000 fa43 	bl	80006dc <GPIO_ToggleOutputPin>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	48001000 	.word	0x48001000

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000280:	4c0a      	ldr	r4, [pc, #40]	; (80002ac <LoopForever+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 fb0f 	bl	80008b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ff9f 	bl	80001d4 <main>

08000296 <LoopForever>:

LoopForever:
  b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a4:	08000918 	.word	0x08000918
  ldr r2, =_sbss
 80002a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC1_2_IRQHandler>
	...

080002b4 <GPIO_Init>:
 *      Author: kana
 */

#include "stm32f303xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80002b4:	b480      	push	{r7}
 80002b6:	b087      	sub	sp, #28
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_ANALOG && pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_IN) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	795b      	ldrb	r3, [r3, #5]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d81f      	bhi.n	8000308 <GPIO_Init+0x54>
		// non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	795b      	ldrb	r3, [r3, #5]
 80002cc:	461a      	mov	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	791b      	ldrb	r3, [r3, #4]
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	fa02 f303 	lsl.w	r3, r2, r3
 80002d8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOX->MODER &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	791b      	ldrb	r3, [r3, #4]
 80002e4:	4619      	mov	r1, r3
 80002e6:	230b      	movs	r3, #11
 80002e8:	408b      	lsls	r3, r1
 80002ea:	43db      	mvns	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	400a      	ands	r2, r1
 80002f4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOX->MODER |= temp;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	6819      	ldr	r1, [r3, #0]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	697a      	ldr	r2, [r7, #20]
 8000302:	430a      	orrs	r2, r1
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	e0a2      	b.n	800044e <GPIO_Init+0x19a>
	} else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	2b04      	cmp	r3, #4
 800030e:	d117      	bne.n	8000340 <GPIO_Init+0x8c>
			// 1. Configure the falling trigger selection register
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000310:	4b9b      	ldr	r3, [pc, #620]	; (8000580 <GPIO_Init+0x2cc>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	7912      	ldrb	r2, [r2, #4]
 8000318:	4611      	mov	r1, r2
 800031a:	2201      	movs	r2, #1
 800031c:	408a      	lsls	r2, r1
 800031e:	4611      	mov	r1, r2
 8000320:	4a97      	ldr	r2, [pc, #604]	; (8000580 <GPIO_Init+0x2cc>)
 8000322:	430b      	orrs	r3, r1
 8000324:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000326:	4b96      	ldr	r3, [pc, #600]	; (8000580 <GPIO_Init+0x2cc>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	7912      	ldrb	r2, [r2, #4]
 800032e:	4611      	mov	r1, r2
 8000330:	2201      	movs	r2, #1
 8000332:	408a      	lsls	r2, r1
 8000334:	43d2      	mvns	r2, r2
 8000336:	4611      	mov	r1, r2
 8000338:	4a91      	ldr	r2, [pc, #580]	; (8000580 <GPIO_Init+0x2cc>)
 800033a:	400b      	ands	r3, r1
 800033c:	6093      	str	r3, [r2, #8]
 800033e:	e035      	b.n	80003ac <GPIO_Init+0xf8>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	795b      	ldrb	r3, [r3, #5]
 8000344:	2b05      	cmp	r3, #5
 8000346:	d117      	bne.n	8000378 <GPIO_Init+0xc4>
			// 1. Configure the raising trigger selection register
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000348:	4b8d      	ldr	r3, [pc, #564]	; (8000580 <GPIO_Init+0x2cc>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	7912      	ldrb	r2, [r2, #4]
 8000350:	4611      	mov	r1, r2
 8000352:	2201      	movs	r2, #1
 8000354:	408a      	lsls	r2, r1
 8000356:	4611      	mov	r1, r2
 8000358:	4a89      	ldr	r2, [pc, #548]	; (8000580 <GPIO_Init+0x2cc>)
 800035a:	430b      	orrs	r3, r1
 800035c:	6093      	str	r3, [r2, #8]

			// clear the corresponding rtsr bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800035e:	4b88      	ldr	r3, [pc, #544]	; (8000580 <GPIO_Init+0x2cc>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	7912      	ldrb	r2, [r2, #4]
 8000366:	4611      	mov	r1, r2
 8000368:	2201      	movs	r2, #1
 800036a:	408a      	lsls	r2, r1
 800036c:	43d2      	mvns	r2, r2
 800036e:	4611      	mov	r1, r2
 8000370:	4a83      	ldr	r2, [pc, #524]	; (8000580 <GPIO_Init+0x2cc>)
 8000372:	400b      	ands	r3, r1
 8000374:	60d3      	str	r3, [r2, #12]
 8000376:	e019      	b.n	80003ac <GPIO_Init+0xf8>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	795b      	ldrb	r3, [r3, #5]
 800037c:	2b06      	cmp	r3, #6
 800037e:	d115      	bne.n	80003ac <GPIO_Init+0xf8>
			// 1. Configure both falling and raising trigger selection registers
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000380:	4b7f      	ldr	r3, [pc, #508]	; (8000580 <GPIO_Init+0x2cc>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	7912      	ldrb	r2, [r2, #4]
 8000388:	4611      	mov	r1, r2
 800038a:	2201      	movs	r2, #1
 800038c:	408a      	lsls	r2, r1
 800038e:	4611      	mov	r1, r2
 8000390:	4a7b      	ldr	r2, [pc, #492]	; (8000580 <GPIO_Init+0x2cc>)
 8000392:	430b      	orrs	r3, r1
 8000394:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000396:	4b7a      	ldr	r3, [pc, #488]	; (8000580 <GPIO_Init+0x2cc>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	7912      	ldrb	r2, [r2, #4]
 800039e:	4611      	mov	r1, r2
 80003a0:	2201      	movs	r2, #1
 80003a2:	408a      	lsls	r2, r1
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a76      	ldr	r2, [pc, #472]	; (8000580 <GPIO_Init+0x2cc>)
 80003a8:	430b      	orrs	r3, r1
 80003aa:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	089b      	lsrs	r3, r3, #2
 80003b2:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOX);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003c6:	d024      	beq.n	8000412 <GPIO_Init+0x15e>
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a6d      	ldr	r2, [pc, #436]	; (8000584 <GPIO_Init+0x2d0>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d01d      	beq.n	800040e <GPIO_Init+0x15a>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a6c      	ldr	r2, [pc, #432]	; (8000588 <GPIO_Init+0x2d4>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d016      	beq.n	800040a <GPIO_Init+0x156>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a6a      	ldr	r2, [pc, #424]	; (800058c <GPIO_Init+0x2d8>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d00f      	beq.n	8000406 <GPIO_Init+0x152>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a69      	ldr	r2, [pc, #420]	; (8000590 <GPIO_Init+0x2dc>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d008      	beq.n	8000402 <GPIO_Init+0x14e>
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a67      	ldr	r2, [pc, #412]	; (8000594 <GPIO_Init+0x2e0>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d101      	bne.n	80003fe <GPIO_Init+0x14a>
 80003fa:	2305      	movs	r3, #5
 80003fc:	e00a      	b.n	8000414 <GPIO_Init+0x160>
 80003fe:	2300      	movs	r3, #0
 8000400:	e008      	b.n	8000414 <GPIO_Init+0x160>
 8000402:	2304      	movs	r3, #4
 8000404:	e006      	b.n	8000414 <GPIO_Init+0x160>
 8000406:	2303      	movs	r3, #3
 8000408:	e004      	b.n	8000414 <GPIO_Init+0x160>
 800040a:	2302      	movs	r3, #2
 800040c:	e002      	b.n	8000414 <GPIO_Init+0x160>
 800040e:	2301      	movs	r3, #1
 8000410:	e000      	b.n	8000414 <GPIO_Init+0x160>
 8000412:	2300      	movs	r3, #0
 8000414:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000416:	4b60      	ldr	r3, [pc, #384]	; (8000598 <GPIO_Init+0x2e4>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a5f      	ldr	r2, [pc, #380]	; (8000598 <GPIO_Init+0x2e4>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 3);
 8000422:	7c79      	ldrb	r1, [r7, #17]
 8000424:	7cba      	ldrb	r2, [r7, #18]
 8000426:	4613      	mov	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	4413      	add	r3, r2
 800042c:	4099      	lsls	r1, r3
 800042e:	4a5b      	ldr	r2, [pc, #364]	; (800059c <GPIO_Init+0x2e8>)
 8000430:	7cfb      	ldrb	r3, [r7, #19]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	4413      	add	r3, r2
 8000436:	6059      	str	r1, [r3, #4]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000438:	4b51      	ldr	r3, [pc, #324]	; (8000580 <GPIO_Init+0x2cc>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	4611      	mov	r1, r2
 8000448:	4a4d      	ldr	r2, [pc, #308]	; (8000580 <GPIO_Init+0x2cc>)
 800044a:	430b      	orrs	r3, r1
 800044c:	6013      	str	r3, [r2, #0]
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	799b      	ldrb	r3, [r3, #6]
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->OSPEEDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	4619      	mov	r1, r3
 800046c:	230b      	movs	r3, #11
 800046e:	408b      	lsls	r3, r1
 8000470:	43db      	mvns	r3, r3
 8000472:	4619      	mov	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	400a      	ands	r2, r1
 800047a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDR |= temp;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	6899      	ldr	r1, [r3, #8]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	697a      	ldr	r2, [r7, #20]
 8000488:	430a      	orrs	r2, r1
 800048a:	609a      	str	r2, [r3, #8]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	79db      	ldrb	r3, [r3, #7]
 8000490:	461a      	mov	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->PUPDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	68da      	ldr	r2, [r3, #12]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	4619      	mov	r1, r3
 80004aa:	230b      	movs	r3, #11
 80004ac:	408b      	lsls	r3, r1
 80004ae:	43db      	mvns	r3, r3
 80004b0:	4619      	mov	r1, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	400a      	ands	r2, r1
 80004b8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	68d9      	ldr	r1, [r3, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	430a      	orrs	r2, r1
 80004c8:	60da      	str	r2, [r3, #12]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // multiply by 2 because each pin takes 2 bit fields
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	79db      	ldrb	r3, [r3, #7]
 80004ce:	461a      	mov	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	fa02 f303 	lsl.w	r3, r2, r3
 80004d8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->MODER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	4619      	mov	r1, r3
 80004e6:	2301      	movs	r3, #1
 80004e8:	408b      	lsls	r3, r1
 80004ea:	43db      	mvns	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	400a      	ands	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	6859      	ldr	r1, [r3, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	430a      	orrs	r2, r1
 8000504:	605a      	str	r2, [r3, #4]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	795b      	ldrb	r3, [r3, #5]
 800050a:	2b02      	cmp	r3, #2
 800050c:	d132      	bne.n	8000574 <GPIO_Init+0x2c0>
		// configure the alt function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	08db      	lsrs	r3, r3, #3
 8000514:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	f003 0307 	and.w	r3, r3, #7
 800051e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOX->AFR[temp1] &= ~(1111 << (4 * temp2));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	7c3a      	ldrb	r2, [r7, #16]
 8000526:	3208      	adds	r2, #8
 8000528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	f240 4257 	movw	r2, #1111	; 0x457
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
 8000538:	43db      	mvns	r3, r3
 800053a:	4618      	mov	r0, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	7c3a      	ldrb	r2, [r7, #16]
 8000542:	4001      	ands	r1, r0
 8000544:	3208      	adds	r2, #8
 8000546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOX->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	7c3a      	ldrb	r2, [r7, #16]
 8000550:	3208      	adds	r2, #8
 8000552:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	7a5b      	ldrb	r3, [r3, #9]
 800055a:	461a      	mov	r2, r3
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	4618      	mov	r0, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	7c3a      	ldrb	r2, [r7, #16]
 800056c:	4301      	orrs	r1, r0
 800056e:	3208      	adds	r2, #8
 8000570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000574:	bf00      	nop
 8000576:	371c      	adds	r7, #28
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40010400 	.word	0x40010400
 8000584:	48000400 	.word	0x48000400
 8000588:	48000800 	.word	0x48000800
 800058c:	48000c00 	.word	0x48000c00
 8000590:	48001000 	.word	0x48001000
 8000594:	48001400 	.word	0x48001400
 8000598:	40021000 	.word	0x40021000
 800059c:	40010000 	.word	0x40010000

080005a0 <GPIO_PeriClockControl>:
//
// @brief - this function enables or disables peripheral clock for the given GPIO port
// @pGPIOx -  base address of the GPIO peripheral
// @EnOrDi - ENABLE or DISABLE macros
//
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d141      	bne.n	8000636 <GPIO_PeriClockControl+0x96>
		if (pGPIOx == GPIOA) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005b8:	d106      	bne.n	80005c8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a41      	ldr	r2, [pc, #260]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 80005c6:	e077      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a3f      	ldr	r2, [pc, #252]	; (80006c8 <GPIO_PeriClockControl+0x128>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d106      	bne.n	80005de <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80005d0:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a3b      	ldr	r2, [pc, #236]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 80005d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005da:	6153      	str	r3, [r2, #20]
}
 80005dc:	e06c      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a3a      	ldr	r2, [pc, #232]	; (80006cc <GPIO_PeriClockControl+0x12c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d106      	bne.n	80005f4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80005e6:	4b37      	ldr	r3, [pc, #220]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a36      	ldr	r2, [pc, #216]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 80005ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005f0:	6153      	str	r3, [r2, #20]
}
 80005f2:	e061      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a36      	ldr	r2, [pc, #216]	; (80006d0 <GPIO_PeriClockControl+0x130>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005fc:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000606:	6153      	str	r3, [r2, #20]
}
 8000608:	e056      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a31      	ldr	r2, [pc, #196]	; (80006d4 <GPIO_PeriClockControl+0x134>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d106      	bne.n	8000620 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a2b      	ldr	r2, [pc, #172]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800061c:	6153      	str	r3, [r2, #20]
}
 800061e:	e04b      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a2d      	ldr	r2, [pc, #180]	; (80006d8 <GPIO_PeriClockControl+0x138>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d147      	bne.n	80006b8 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_EN();
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a25      	ldr	r2, [pc, #148]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 800062e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000632:	6153      	str	r3, [r2, #20]
}
 8000634:	e040      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800063c:	d106      	bne.n	800064c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000648:	6153      	str	r3, [r2, #20]
}
 800064a:	e035      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <GPIO_PeriClockControl+0x128>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d106      	bne.n	8000662 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 800065a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065e:	6153      	str	r3, [r2, #20]
}
 8000660:	e02a      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a19      	ldr	r2, [pc, #100]	; (80006cc <GPIO_PeriClockControl+0x12c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d106      	bne.n	8000678 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000670:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000674:	6153      	str	r3, [r2, #20]
}
 8000676:	e01f      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <GPIO_PeriClockControl+0x130>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d106      	bne.n	800068e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000686:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800068a:	6153      	str	r3, [r2, #20]
}
 800068c:	e014      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <GPIO_PeriClockControl+0x134>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d106      	bne.n	80006a4 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 800069c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80006a0:	6153      	str	r3, [r2, #20]
}
 80006a2:	e009      	b.n	80006b8 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <GPIO_PeriClockControl+0x138>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d105      	bne.n	80006b8 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_DI();
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <GPIO_PeriClockControl+0x124>)
 80006b2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80006b6:	6153      	str	r3, [r2, #20]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48000400 	.word	0x48000400
 80006cc:	48000800 	.word	0x48000800
 80006d0:	48000c00 	.word	0x48000c00
 80006d4:	48001000 	.word	0x48001000
 80006d8:	48001400 	.word	0x48001400

080006dc <GPIO_ToggleOutputPin>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value) {
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	78fa      	ldrb	r2, [r7, #3]
 80006ee:	2101      	movs	r1, #1
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	405a      	eors	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	615a      	str	r2, [r3, #20]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	460a      	mov	r2, r1
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	71bb      	strb	r3, [r7, #6]
	// it is in the processor part, so we should check processor user reference
	if (EnOrDi == ENABLE) {
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d133      	bne.n	8000786 <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31) {
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b1f      	cmp	r3, #31
 8000722:	d80a      	bhi.n	800073a <GPIO_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000724:	4b35      	ldr	r3, [pc, #212]	; (80007fc <GPIO_IRQInterruptConfig+0xf4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a32      	ldr	r2, [pc, #200]	; (80007fc <GPIO_IRQInterruptConfig+0xf4>)
 8000734:	430b      	orrs	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
			// program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000738:	e059      	b.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b1f      	cmp	r3, #31
 800073e:	d90f      	bls.n	8000760 <GPIO_IRQInterruptConfig+0x58>
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b3f      	cmp	r3, #63	; 0x3f
 8000744:	d80c      	bhi.n	8000760 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000746:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <GPIO_IRQInterruptConfig+0xf8>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	f002 021f 	and.w	r2, r2, #31
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	4611      	mov	r1, r2
 8000758:	4a29      	ldr	r2, [pc, #164]	; (8000800 <GPIO_IRQInterruptConfig+0xf8>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	e046      	b.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b3f      	cmp	r3, #63	; 0x3f
 8000764:	d943      	bls.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b5f      	cmp	r3, #95	; 0x5f
 800076a:	d840      	bhi.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <GPIO_IRQInterruptConfig+0xfc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000776:	2101      	movs	r1, #1
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a21      	ldr	r2, [pc, #132]	; (8000804 <GPIO_IRQInterruptConfig+0xfc>)
 8000780:	430b      	orrs	r3, r1
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	e033      	b.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31) {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b1f      	cmp	r3, #31
 800078a:	d80a      	bhi.n	80007a2 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <GPIO_IRQInterruptConfig+0x100>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	79fa      	ldrb	r2, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <GPIO_IRQInterruptConfig+0x100>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	e025      	b.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b1f      	cmp	r3, #31
 80007a6:	d90f      	bls.n	80007c8 <GPIO_IRQInterruptConfig+0xc0>
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b3f      	cmp	r3, #63	; 0x3f
 80007ac:	d80c      	bhi.n	80007c8 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <GPIO_IRQInterruptConfig+0x104>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	f002 021f 	and.w	r2, r2, #31
 80007b8:	2101      	movs	r1, #1
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	4611      	mov	r1, r2
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <GPIO_IRQInterruptConfig+0x104>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e012      	b.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b3f      	cmp	r3, #63	; 0x3f
 80007cc:	d90f      	bls.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b5f      	cmp	r3, #95	; 0x5f
 80007d2:	d80c      	bhi.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <GPIO_IRQInterruptConfig+0x108>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <GPIO_IRQInterruptConfig+0x108>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	e7ff      	b.n	80007ee <GPIO_IRQInterruptConfig+0xe6>
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	e000e104 	.word	0xe000e104
 8000804:	e000e108 	.word	0xe000e108
 8000808:	e000e180 	.word	0xe000e180
 800080c:	e000e184 	.word	0xe000e184
 8000810:	e000e188 	.word	0xe000e188

08000814 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority) {
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	460a      	mov	r2, r1
 800081e:	71fb      	strb	r3, [r7, #7]
 8000820:	4613      	mov	r3, r2
 8000822:	71bb      	strb	r3, [r7, #6]
	// 1. Find out the ipr register
	uint8_t iprxOffset = IRQNumber / 4; // offset of the priority register. 4 - cuz each register is 32 bits
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	73fb      	strb	r3, [r7, #15]
	uint8_t iprxSection = IRQNumber % 4 * 8; // each register has 4 blocks, each block has 8 bits
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 0303 	and.w	r3, r3, #3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	73bb      	strb	r3, [r7, #14]

	uint8_t shiftAmount = iprxSection + (8 - NO_PR_BITS_IMPLEMENTED);
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	3304      	adds	r3, #4
 800083a:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprxOffset * 4) |= (IRQPriority << shiftAmount);
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000844:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	79b9      	ldrb	r1, [r7, #6]
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	4619      	mov	r1, r3
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800085c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000860:	430a      	orrs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber) {
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	// clear the existing pr register corresponding to the pin number
	if (EXTI->PR1 & (1 << PinNumber)) {
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <GPIO_IRQHandling+0x3c>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	2101      	movs	r1, #1
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	4013      	ands	r3, r2
 8000888:	2b00      	cmp	r3, #0
 800088a:	d009      	beq.n	80008a0 <GPIO_IRQHandling+0x30>
		// clear
		EXTI->PR1 |= (1 << PinNumber);
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <GPIO_IRQHandling+0x3c>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	2101      	movs	r1, #1
 8000894:	fa01 f202 	lsl.w	r2, r1, r2
 8000898:	4611      	mov	r1, r2
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <GPIO_IRQHandling+0x3c>)
 800089c:	430b      	orrs	r3, r1
 800089e:	6153      	str	r3, [r2, #20]
	}
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	40010400 	.word	0x40010400

080008b0 <__libc_init_array>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	4d0d      	ldr	r5, [pc, #52]	; (80008e8 <__libc_init_array+0x38>)
 80008b4:	4c0d      	ldr	r4, [pc, #52]	; (80008ec <__libc_init_array+0x3c>)
 80008b6:	1b64      	subs	r4, r4, r5
 80008b8:	10a4      	asrs	r4, r4, #2
 80008ba:	2600      	movs	r6, #0
 80008bc:	42a6      	cmp	r6, r4
 80008be:	d109      	bne.n	80008d4 <__libc_init_array+0x24>
 80008c0:	4d0b      	ldr	r5, [pc, #44]	; (80008f0 <__libc_init_array+0x40>)
 80008c2:	4c0c      	ldr	r4, [pc, #48]	; (80008f4 <__libc_init_array+0x44>)
 80008c4:	f000 f818 	bl	80008f8 <_init>
 80008c8:	1b64      	subs	r4, r4, r5
 80008ca:	10a4      	asrs	r4, r4, #2
 80008cc:	2600      	movs	r6, #0
 80008ce:	42a6      	cmp	r6, r4
 80008d0:	d105      	bne.n	80008de <__libc_init_array+0x2e>
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d8:	4798      	blx	r3
 80008da:	3601      	adds	r6, #1
 80008dc:	e7ee      	b.n	80008bc <__libc_init_array+0xc>
 80008de:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e2:	4798      	blx	r3
 80008e4:	3601      	adds	r6, #1
 80008e6:	e7f2      	b.n	80008ce <__libc_init_array+0x1e>
 80008e8:	08000910 	.word	0x08000910
 80008ec:	08000910 	.word	0x08000910
 80008f0:	08000910 	.word	0x08000910
 80008f4:	08000914 	.word	0x08000914

080008f8 <_init>:
 80008f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fa:	bf00      	nop
 80008fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008fe:	bc08      	pop	{r3}
 8000900:	469e      	mov	lr, r3
 8000902:	4770      	bx	lr

08000904 <_fini>:
 8000904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000906:	bf00      	nop
 8000908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090a:	bc08      	pop	{r3}
 800090c:	469e      	mov	lr, r3
 800090e:	4770      	bx	lr
