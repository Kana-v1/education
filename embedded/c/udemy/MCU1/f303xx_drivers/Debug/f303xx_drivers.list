
f303xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000864  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080009f8  080009f8  000109f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a08  08000a08  00010a10  2**0
                  CONTENTS
  4 .ARM          00000000  08000a08  08000a08  00010a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a08  08000a10  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a08  08000a08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a0c  08000a0c  00010a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a10  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001089  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000036a  00000000  00000000  00011ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00011e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000108  00000000  00000000  00011f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e8a  00000000  00000000  00012080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015b8  00000000  00000000  00013f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008742  00000000  00000000  000154c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001dc04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000450  00000000  00000000  0001dc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080009e0 	.word	0x080009e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080009e0 	.word	0x080009e0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SPI2_GPIOInit>:
// ALT function mode 5
#include "stm32f303xx.h"
#include <string.h>

// this function is used to initialize the GPIO pins to behave as SPI2 pins
void SPI2_GPIOInit(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOX = GPIOB;
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <SPI2_GPIOInit+0x58>)
 80001ec:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT_FN;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001f2:	2305      	movs	r3, #5
 80001f4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000202:	230d      	movs	r3, #13
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f9ad 	bl	8000568 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800020e:	230f      	movs	r3, #15
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f9a7 	bl	8000568 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800021a:	230e      	movs	r3, #14
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f9a1 	bl	8000568 <GPIO_Init>

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000226:	230c      	movs	r3, #12
 8000228:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f99b 	bl	8000568 <GPIO_Init>
}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	48000400 	.word	0x48000400

08000240 <SPI2_Init>:

void SPI2_Init(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <SPI2_Init+0x38>)
 8000248:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_DeviceBusConfig = SPI_BUS_CONFIG_FD;
 800024a:	2301      	movs	r3, #1
 800024c:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800024e:	2301      	movs	r3, #1
 8000250:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; // generates sclk of 8Mhz
 8000252:	2300      	movs	r3, #0
 8000254:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000256:	2300      	movs	r3, #0
 8000258:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800025e:	2300      	movs	r3, #0
 8000260:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // software slave management enabled for NSS pin
 8000262:	2301      	movs	r3, #1
 8000264:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4618      	mov	r0, r3
 800026a:	f000 f8bd 	bl	80003e8 <SPI_Init>
}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40003800 	.word	0x40003800

0800027c <main>:

int main(void) {
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world!";
 8000282:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <main+0x58>)
 8000284:	463c      	mov	r4, r7
 8000286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000288:	c407      	stmia	r4!, {r0, r1, r2}
 800028a:	7023      	strb	r3, [r4, #0]
	SPI2_GPIOInit();
 800028c:	f7ff ffaa 	bl	80001e4 <SPI2_GPIOInit>

	SPI2_Init();
 8000290:	f7ff ffd6 	bl	8000240 <SPI2_Init>

	// this makes  NSS signal
	SPI_SSIConfig(SPI2, ENABLE);
 8000294:	2101      	movs	r1, #1
 8000296:	4810      	ldr	r0, [pc, #64]	; (80002d8 <main+0x5c>)
 8000298:	f000 f88a 	bl	80003b0 <SPI_SSIConfig>

	while (1) {

		// enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 800029c:	2101      	movs	r1, #1
 800029e:	480e      	ldr	r0, [pc, #56]	; (80002d8 <main+0x5c>)
 80002a0:	f000 f945 	bl	800052e <SPI_PeripheralControl>

		SPI_SendData(SPI2, (uint8_t*) user_data, strlen(user_data));
 80002a4:	463b      	mov	r3, r7
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff94 	bl	80001d4 <strlen>
 80002ac:	4602      	mov	r2, r0
 80002ae:	463b      	mov	r3, r7
 80002b0:	4619      	mov	r1, r3
 80002b2:	4809      	ldr	r0, [pc, #36]	; (80002d8 <main+0x5c>)
 80002b4:	f000 f907 	bl	80004c6 <SPI_SendData>

		// we have to ensure that all data was sent before disabling peripheral
		// 1. confirm that SPI is not busy
		while (SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG))
 80002b8:	bf00      	nop
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	4806      	ldr	r0, [pc, #24]	; (80002d8 <main+0x5c>)
 80002be:	f000 f8ee 	bl	800049e <SPI_GetFlagStatus>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1f8      	bne.n	80002ba <main+0x3e>
			;

		SPI_PeripheralControl(SPI2, DISABLE);
 80002c8:	2100      	movs	r1, #0
 80002ca:	4803      	ldr	r0, [pc, #12]	; (80002d8 <main+0x5c>)
 80002cc:	f000 f92f 	bl	800052e <SPI_PeripheralControl>
		SPI_PeripheralControl(SPI2, ENABLE);
 80002d0:	e7e4      	b.n	800029c <main+0x20>
 80002d2:	bf00      	nop
 80002d4:	080009f8 	.word	0x080009f8
 80002d8:	40003800 	.word	0x40003800

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 fb45 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ffb5 	bl	800027c <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000a10 	.word	0x08000a10
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC1_2_IRQHandler>
	...

08000330 <SPI_PeriClockControl>:
 */

// peripheral clock setup
#include "stm32f303xx_spi_driver.h"

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d115      	bne.n	800036e <SPI_PeriClockControl+0x3e>
		if (pSPIx == SPI1) {
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a17      	ldr	r2, [pc, #92]	; (80003a4 <SPI_PeriClockControl+0x74>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <SPI_PeriClockControl+0x78>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <SPI_PeriClockControl+0x78>)
 8000350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000354:	6193      	str	r3, [r2, #24]
			SPI1_PCLK_DI();
		} else if (pSPIx == SPI2) {
			SPI2_PCLK_DI();
		}
	}
}
 8000356:	e01f      	b.n	8000398 <SPI_PeriClockControl+0x68>
		} else if (pSPIx == SPI2) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <SPI_PeriClockControl+0x7c>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d11b      	bne.n	8000398 <SPI_PeriClockControl+0x68>
			SPI2_PCLK_EN();
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <SPI_PeriClockControl+0x78>)
 8000362:	69db      	ldr	r3, [r3, #28]
 8000364:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <SPI_PeriClockControl+0x78>)
 8000366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036a:	61d3      	str	r3, [r2, #28]
}
 800036c:	e014      	b.n	8000398 <SPI_PeriClockControl+0x68>
		if (pSPIx == SPI1) {
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <SPI_PeriClockControl+0x74>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <SPI_PeriClockControl+0x54>
			SPI1_PCLK_DI();
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <SPI_PeriClockControl+0x78>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <SPI_PeriClockControl+0x78>)
 800037c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000380:	6193      	str	r3, [r2, #24]
}
 8000382:	e009      	b.n	8000398 <SPI_PeriClockControl+0x68>
		} else if (pSPIx == SPI2) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a09      	ldr	r2, [pc, #36]	; (80003ac <SPI_PeriClockControl+0x7c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d105      	bne.n	8000398 <SPI_PeriClockControl+0x68>
			SPI2_PCLK_DI();
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <SPI_PeriClockControl+0x78>)
 800038e:	69db      	ldr	r3, [r3, #28]
 8000390:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <SPI_PeriClockControl+0x78>)
 8000392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000396:	61d3      	str	r3, [r2, #28]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40013000 	.word	0x40013000
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40003800 	.word	0x40003800

080003b0 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPI, uint8_t enOrDi) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE) {
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d106      	bne.n	80003d0 <SPI_SSIConfig+0x20>
		pSPI->CR1 |= (1 << SPI_CR1_SSI);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	601a      	str	r2, [r3, #0]
	} else {
		pSPI->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 80003ce:	e005      	b.n	80003dc <SPI_SSIConfig+0x2c>
		pSPI->CR1 &= ~(1 << SPI_CR1_SSI);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	// peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2101      	movs	r1, #1
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff9a 	bl	8000330 <SPI_PeriClockControl>
	// configure the SOU_CR1 register
	uint32_t tempReg = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]

	// 1. configure the device mode
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	461a      	mov	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4313      	orrs	r3, r2
 800040c:	60fb      	str	r3, [r7, #12]

	// 2. configure the bus configuration
	if (pSPIHandle->SPIConfig.SPI_DeviceBusConfig == SPI_BUS_CONFIG_FD) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	795b      	ldrb	r3, [r3, #5]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d104      	bne.n	8000420 <SPI_Init+0x38>
		// bidirectional mode should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	e014      	b.n	800044a <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.SPI_DeviceBusConfig == SPI_BUS_CONFIG_HD) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	795b      	ldrb	r3, [r3, #5]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d104      	bne.n	8000432 <SPI_Init+0x4a>
		// bidirectional mode should be set
		tempReg |= ~(1 << SPI_CR1_BIDIMODE);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	e00b      	b.n	800044a <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.SPI_DeviceBusConfig == SPI_BUS_CONFIG_S_RXONLY) {
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	795b      	ldrb	r3, [r3, #5]
 8000436:	2b03      	cmp	r3, #3
 8000438:	d107      	bne.n	800044a <SPI_Init+0x62>
		// bidirectional mode should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000440:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempReg |= ~(1 << SPI_CR1_RXONLY);
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	f463 6380 	orn	r3, r3, #1024	; 0x400
 8000448:	60fb      	str	r3, [r7, #12]
	}

	// 3. configure the serial clock speed
	tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	799b      	ldrb	r3, [r3, #6]
 800044e:	00db      	lsls	r3, r3, #3
 8000450:	461a      	mov	r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4313      	orrs	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]

	// 4. configure the DFF
	tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	79db      	ldrb	r3, [r3, #7]
 800045c:	02db      	lsls	r3, r3, #11
 800045e:	461a      	mov	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	4313      	orrs	r3, r2
 8000464:	60fb      	str	r3, [r7, #12]

	// 5. configure the CPOL
	tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	7a1b      	ldrb	r3, [r3, #8]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	461a      	mov	r2, r3
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4313      	orrs	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]

	// 6. configure the CPHA
	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a5b      	ldrb	r3, [r3, #9]
 8000478:	461a      	mov	r2, r3
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	4313      	orrs	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]

	// 7. configure the SSM
	tempReg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7a9b      	ldrb	r3, [r3, #10]
 8000484:	025b      	lsls	r3, r3, #9
 8000486:	461a      	mov	r2, r3
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	4313      	orrs	r3, r2
 800048c:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <SPI_GetFlagStatus>:

void SPI_DeInit(SPI_RegDef_t *pSPIx) {

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName) {
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
 80004a6:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & flagName) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	689a      	ldr	r2, [r3, #8]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	4013      	ands	r3, r2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80004b4:	2301      	movs	r3, #1
 80004b6:	e000      	b.n	80004ba <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <SPI_SendData>:
		pSPI->CR2 &= ~(1 << SPI_CR2_SSOI);
	}
}

// data send and receive
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *dataPtr, uint32_t length) {
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b084      	sub	sp, #16
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
	while (length > 0) {
 80004d2:	e024      	b.n	800051e <SPI_SendData+0x58>
		// 1. wait until data has come to the Tx register (Txe is set)
		while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET) // was FLAG_RESET
 80004d4:	bf00      	nop
 80004d6:	2102      	movs	r1, #2
 80004d8:	68f8      	ldr	r0, [r7, #12]
 80004da:	f7ff ffe0 	bl	800049e <SPI_GetFlagStatus>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d0f8      	beq.n	80004d6 <SPI_SendData+0x10>
			;

		// 2. check the DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d00b      	beq.n	8000508 <SPI_SendData+0x42>
			// 16 bit data format
			// 1. load the data into the DR
			pSPIx->DR = *((uint16_t*) dataPtr);
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	60da      	str	r2, [r3, #12]
			length -= 2;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3b02      	subs	r3, #2
 80004fe:	607b      	str	r3, [r7, #4]
			(uint16_t*) dataPtr++;
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	3301      	adds	r3, #1
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	e00a      	b.n	800051e <SPI_SendData+0x58>
		} else {
			// 8 bit data format
			pSPIx->DR = *dataPtr;
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	60da      	str	r2, [r3, #12]
			length--;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3b01      	subs	r3, #1
 8000516:	607b      	str	r3, [r7, #4]
			dataPtr++;
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	3301      	adds	r3, #1
 800051c:	60bb      	str	r3, [r7, #8]
	while (length > 0) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1d7      	bne.n	80004d4 <SPI_SendData+0xe>
		}
	}
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPI, uint8_t enOrDi) {
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	460b      	mov	r3, r1
 8000538:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE) {
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d106      	bne.n	800054e <SPI_PeripheralControl+0x20>
		pSPI->CR1 |= (1 << SPI_CR1_SPE);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
	} else {
		pSPI->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 800054c:	e005      	b.n	800055a <SPI_PeripheralControl+0x2c>
		pSPI->CR1 &= ~(1 << SPI_CR1_SPE);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	601a      	str	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <GPIO_Init>:
 *      Author: kana
 */

#include "stm32f303xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOX, ENABLE);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f96e 	bl	800085c <GPIO_PeriClockControl>

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_ANALOG && pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_IN) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	795b      	ldrb	r3, [r3, #5]
 8000584:	2b02      	cmp	r3, #2
 8000586:	d81f      	bhi.n	80005c8 <GPIO_Init+0x60>
		// non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	461a      	mov	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOX->MODER &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	4619      	mov	r1, r3
 80005a6:	230b      	movs	r3, #11
 80005a8:	408b      	lsls	r3, r1
 80005aa:	43db      	mvns	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	400a      	ands	r2, r1
 80005b4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOX->MODER |= temp;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6819      	ldr	r1, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	e0a2      	b.n	800070e <GPIO_Init+0x1a6>
	} else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d117      	bne.n	8000600 <GPIO_Init+0x98>
			// 1. Configure the falling trigger selection register
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	4b9a      	ldr	r3, [pc, #616]	; (800083c <GPIO_Init+0x2d4>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a96      	ldr	r2, [pc, #600]	; (800083c <GPIO_Init+0x2d4>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e6:	4b95      	ldr	r3, [pc, #596]	; (800083c <GPIO_Init+0x2d4>)
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	43d2      	mvns	r2, r2
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a90      	ldr	r2, [pc, #576]	; (800083c <GPIO_Init+0x2d4>)
 80005fa:	400b      	ands	r3, r1
 80005fc:	6093      	str	r3, [r2, #8]
 80005fe:	e035      	b.n	800066c <GPIO_Init+0x104>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	795b      	ldrb	r3, [r3, #5]
 8000604:	2b05      	cmp	r3, #5
 8000606:	d117      	bne.n	8000638 <GPIO_Init+0xd0>
			// 1. Configure the raising trigger selection register
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000608:	4b8c      	ldr	r3, [pc, #560]	; (800083c <GPIO_Init+0x2d4>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	7912      	ldrb	r2, [r2, #4]
 8000610:	4611      	mov	r1, r2
 8000612:	2201      	movs	r2, #1
 8000614:	408a      	lsls	r2, r1
 8000616:	4611      	mov	r1, r2
 8000618:	4a88      	ldr	r2, [pc, #544]	; (800083c <GPIO_Init+0x2d4>)
 800061a:	430b      	orrs	r3, r1
 800061c:	6093      	str	r3, [r2, #8]

			// clear the corresponding rtsr bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061e:	4b87      	ldr	r3, [pc, #540]	; (800083c <GPIO_Init+0x2d4>)
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7912      	ldrb	r2, [r2, #4]
 8000626:	4611      	mov	r1, r2
 8000628:	2201      	movs	r2, #1
 800062a:	408a      	lsls	r2, r1
 800062c:	43d2      	mvns	r2, r2
 800062e:	4611      	mov	r1, r2
 8000630:	4a82      	ldr	r2, [pc, #520]	; (800083c <GPIO_Init+0x2d4>)
 8000632:	400b      	ands	r3, r1
 8000634:	60d3      	str	r3, [r2, #12]
 8000636:	e019      	b.n	800066c <GPIO_Init+0x104>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	795b      	ldrb	r3, [r3, #5]
 800063c:	2b06      	cmp	r3, #6
 800063e:	d115      	bne.n	800066c <GPIO_Init+0x104>
			// 1. Configure both falling and raising trigger selection registers
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000640:	4b7e      	ldr	r3, [pc, #504]	; (800083c <GPIO_Init+0x2d4>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	7912      	ldrb	r2, [r2, #4]
 8000648:	4611      	mov	r1, r2
 800064a:	2201      	movs	r2, #1
 800064c:	408a      	lsls	r2, r1
 800064e:	4611      	mov	r1, r2
 8000650:	4a7a      	ldr	r2, [pc, #488]	; (800083c <GPIO_Init+0x2d4>)
 8000652:	430b      	orrs	r3, r1
 8000654:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000656:	4b79      	ldr	r3, [pc, #484]	; (800083c <GPIO_Init+0x2d4>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7912      	ldrb	r2, [r2, #4]
 800065e:	4611      	mov	r1, r2
 8000660:	2201      	movs	r2, #1
 8000662:	408a      	lsls	r2, r1
 8000664:	4611      	mov	r1, r2
 8000666:	4a75      	ldr	r2, [pc, #468]	; (800083c <GPIO_Init+0x2d4>)
 8000668:	430b      	orrs	r3, r1
 800066a:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	089b      	lsrs	r3, r3, #2
 8000672:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	f003 0303 	and.w	r3, r3, #3
 800067c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOX);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000686:	d024      	beq.n	80006d2 <GPIO_Init+0x16a>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a6c      	ldr	r2, [pc, #432]	; (8000840 <GPIO_Init+0x2d8>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d01d      	beq.n	80006ce <GPIO_Init+0x166>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a6b      	ldr	r2, [pc, #428]	; (8000844 <GPIO_Init+0x2dc>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d016      	beq.n	80006ca <GPIO_Init+0x162>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a69      	ldr	r2, [pc, #420]	; (8000848 <GPIO_Init+0x2e0>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d00f      	beq.n	80006c6 <GPIO_Init+0x15e>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a68      	ldr	r2, [pc, #416]	; (800084c <GPIO_Init+0x2e4>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d008      	beq.n	80006c2 <GPIO_Init+0x15a>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a66      	ldr	r2, [pc, #408]	; (8000850 <GPIO_Init+0x2e8>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d101      	bne.n	80006be <GPIO_Init+0x156>
 80006ba:	2305      	movs	r3, #5
 80006bc:	e00a      	b.n	80006d4 <GPIO_Init+0x16c>
 80006be:	2300      	movs	r3, #0
 80006c0:	e008      	b.n	80006d4 <GPIO_Init+0x16c>
 80006c2:	2304      	movs	r3, #4
 80006c4:	e006      	b.n	80006d4 <GPIO_Init+0x16c>
 80006c6:	2303      	movs	r3, #3
 80006c8:	e004      	b.n	80006d4 <GPIO_Init+0x16c>
 80006ca:	2302      	movs	r3, #2
 80006cc:	e002      	b.n	80006d4 <GPIO_Init+0x16c>
 80006ce:	2301      	movs	r3, #1
 80006d0:	e000      	b.n	80006d4 <GPIO_Init+0x16c>
 80006d2:	2300      	movs	r3, #0
 80006d4:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006d6:	4b5f      	ldr	r3, [pc, #380]	; (8000854 <GPIO_Init+0x2ec>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a5e      	ldr	r2, [pc, #376]	; (8000854 <GPIO_Init+0x2ec>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 3);
 80006e2:	7c79      	ldrb	r1, [r7, #17]
 80006e4:	7cba      	ldrb	r2, [r7, #18]
 80006e6:	4613      	mov	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	4099      	lsls	r1, r3
 80006ee:	4a5a      	ldr	r2, [pc, #360]	; (8000858 <GPIO_Init+0x2f0>)
 80006f0:	7cfb      	ldrb	r3, [r7, #19]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	6059      	str	r1, [r3, #4]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006f8:	4b50      	ldr	r3, [pc, #320]	; (800083c <GPIO_Init+0x2d4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	7912      	ldrb	r2, [r2, #4]
 8000700:	4611      	mov	r1, r2
 8000702:	2201      	movs	r2, #1
 8000704:	408a      	lsls	r2, r1
 8000706:	4611      	mov	r1, r2
 8000708:	4a4c      	ldr	r2, [pc, #304]	; (800083c <GPIO_Init+0x2d4>)
 800070a:	430b      	orrs	r3, r1
 800070c:	6013      	str	r3, [r2, #0]
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	461a      	mov	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->OSPEEDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	689a      	ldr	r2, [r3, #8]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	4619      	mov	r1, r3
 800072c:	230b      	movs	r3, #11
 800072e:	408b      	lsls	r3, r1
 8000730:	43db      	mvns	r3, r3
 8000732:	4619      	mov	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	400a      	ands	r2, r1
 800073a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDR |= temp;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6899      	ldr	r1, [r3, #8]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	430a      	orrs	r2, r1
 800074a:	609a      	str	r2, [r3, #8]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	79db      	ldrb	r3, [r3, #7]
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->PUPDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	4619      	mov	r1, r3
 800076a:	230b      	movs	r3, #11
 800076c:	408b      	lsls	r3, r1
 800076e:	43db      	mvns	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	400a      	ands	r2, r1
 8000778:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68d9      	ldr	r1, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	430a      	orrs	r2, r1
 8000788:	60da      	str	r2, [r3, #12]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // multiply by 2 because each pin takes 2 bit fields
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	79db      	ldrb	r3, [r3, #7]
 800078e:	461a      	mov	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->MODER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	4619      	mov	r1, r3
 80007a6:	2301      	movs	r3, #1
 80007a8:	408b      	lsls	r3, r1
 80007aa:	43db      	mvns	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	400a      	ands	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	6859      	ldr	r1, [r3, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	605a      	str	r2, [r3, #4]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d131      	bne.n	8000832 <GPIO_Init+0x2ca>
		// configure the alt function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOX->AFR[temp1] &= ~(0b1111 << (4 * temp2));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	7c3a      	ldrb	r2, [r7, #16]
 80007e6:	3208      	adds	r2, #8
 80007e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	220f      	movs	r2, #15
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	7c3a      	ldrb	r2, [r7, #16]
 8000800:	4001      	ands	r1, r0
 8000802:	3208      	adds	r2, #8
 8000804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOX->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	7c3a      	ldrb	r2, [r7, #16]
 800080e:	3208      	adds	r2, #8
 8000810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a5b      	ldrb	r3, [r3, #9]
 8000818:	461a      	mov	r2, r3
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	7c3a      	ldrb	r2, [r7, #16]
 800082a:	4301      	orrs	r1, r0
 800082c:	3208      	adds	r2, #8
 800082e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010400 	.word	0x40010400
 8000840:	48000400 	.word	0x48000400
 8000844:	48000800 	.word	0x48000800
 8000848:	48000c00 	.word	0x48000c00
 800084c:	48001000 	.word	0x48001000
 8000850:	48001400 	.word	0x48001400
 8000854:	40021000 	.word	0x40021000
 8000858:	40010000 	.word	0x40010000

0800085c <GPIO_PeriClockControl>:
//
// @brief - this function enables or disables peripheral clock for the given GPIO port
// @pGPIOx -  base address of the GPIO peripheral
// @EnOrDi - ENABLE or DISABLE macros
//
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d141      	bne.n	80008f2 <GPIO_PeriClockControl+0x96>
		if (pGPIOx == GPIOA) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000874:	d106      	bne.n	8000884 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000876:	4b42      	ldr	r3, [pc, #264]	; (8000980 <GPIO_PeriClockControl+0x124>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a41      	ldr	r2, [pc, #260]	; (8000980 <GPIO_PeriClockControl+0x124>)
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	6153      	str	r3, [r2, #20]
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 8000882:	e077      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a3f      	ldr	r2, [pc, #252]	; (8000984 <GPIO_PeriClockControl+0x128>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d106      	bne.n	800089a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800088c:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <GPIO_PeriClockControl+0x124>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	4a3b      	ldr	r2, [pc, #236]	; (8000980 <GPIO_PeriClockControl+0x124>)
 8000892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000896:	6153      	str	r3, [r2, #20]
}
 8000898:	e06c      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a3a      	ldr	r2, [pc, #232]	; (8000988 <GPIO_PeriClockControl+0x12c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d106      	bne.n	80008b0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80008a2:	4b37      	ldr	r3, [pc, #220]	; (8000980 <GPIO_PeriClockControl+0x124>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a36      	ldr	r2, [pc, #216]	; (8000980 <GPIO_PeriClockControl+0x124>)
 80008a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008ac:	6153      	str	r3, [r2, #20]
}
 80008ae:	e061      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a36      	ldr	r2, [pc, #216]	; (800098c <GPIO_PeriClockControl+0x130>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d106      	bne.n	80008c6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80008b8:	4b31      	ldr	r3, [pc, #196]	; (8000980 <GPIO_PeriClockControl+0x124>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a30      	ldr	r2, [pc, #192]	; (8000980 <GPIO_PeriClockControl+0x124>)
 80008be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008c2:	6153      	str	r3, [r2, #20]
}
 80008c4:	e056      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a31      	ldr	r2, [pc, #196]	; (8000990 <GPIO_PeriClockControl+0x134>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d106      	bne.n	80008dc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <GPIO_PeriClockControl+0x124>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a2b      	ldr	r2, [pc, #172]	; (8000980 <GPIO_PeriClockControl+0x124>)
 80008d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d8:	6153      	str	r3, [r2, #20]
}
 80008da:	e04b      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a2d      	ldr	r2, [pc, #180]	; (8000994 <GPIO_PeriClockControl+0x138>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d147      	bne.n	8000974 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_EN();
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <GPIO_PeriClockControl+0x124>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	4a25      	ldr	r2, [pc, #148]	; (8000980 <GPIO_PeriClockControl+0x124>)
 80008ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ee:	6153      	str	r3, [r2, #20]
}
 80008f0:	e040      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80008f8:	d106      	bne.n	8000908 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <GPIO_PeriClockControl+0x124>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a20      	ldr	r2, [pc, #128]	; (8000980 <GPIO_PeriClockControl+0x124>)
 8000900:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000904:	6153      	str	r3, [r2, #20]
}
 8000906:	e035      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <GPIO_PeriClockControl+0x128>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d106      	bne.n	800091e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <GPIO_PeriClockControl+0x124>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <GPIO_PeriClockControl+0x124>)
 8000916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091a:	6153      	str	r3, [r2, #20]
}
 800091c:	e02a      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <GPIO_PeriClockControl+0x12c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d106      	bne.n	8000934 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <GPIO_PeriClockControl+0x124>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <GPIO_PeriClockControl+0x124>)
 800092c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000930:	6153      	str	r3, [r2, #20]
}
 8000932:	e01f      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <GPIO_PeriClockControl+0x130>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d106      	bne.n	800094a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <GPIO_PeriClockControl+0x124>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <GPIO_PeriClockControl+0x124>)
 8000942:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000946:	6153      	str	r3, [r2, #20]
}
 8000948:	e014      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a10      	ldr	r2, [pc, #64]	; (8000990 <GPIO_PeriClockControl+0x134>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d106      	bne.n	8000960 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <GPIO_PeriClockControl+0x124>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <GPIO_PeriClockControl+0x124>)
 8000958:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800095c:	6153      	str	r3, [r2, #20]
}
 800095e:	e009      	b.n	8000974 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <GPIO_PeriClockControl+0x138>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d105      	bne.n	8000974 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_DI();
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <GPIO_PeriClockControl+0x124>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <GPIO_PeriClockControl+0x124>)
 800096e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000972:	6153      	str	r3, [r2, #20]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	40021000 	.word	0x40021000
 8000984:	48000400 	.word	0x48000400
 8000988:	48000800 	.word	0x48000800
 800098c:	48000c00 	.word	0x48000c00
 8000990:	48001000 	.word	0x48001000
 8000994:	48001400 	.word	0x48001400

08000998 <__libc_init_array>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d0d      	ldr	r5, [pc, #52]	; (80009d0 <__libc_init_array+0x38>)
 800099c:	4c0d      	ldr	r4, [pc, #52]	; (80009d4 <__libc_init_array+0x3c>)
 800099e:	1b64      	subs	r4, r4, r5
 80009a0:	10a4      	asrs	r4, r4, #2
 80009a2:	2600      	movs	r6, #0
 80009a4:	42a6      	cmp	r6, r4
 80009a6:	d109      	bne.n	80009bc <__libc_init_array+0x24>
 80009a8:	4d0b      	ldr	r5, [pc, #44]	; (80009d8 <__libc_init_array+0x40>)
 80009aa:	4c0c      	ldr	r4, [pc, #48]	; (80009dc <__libc_init_array+0x44>)
 80009ac:	f000 f818 	bl	80009e0 <_init>
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	10a4      	asrs	r4, r4, #2
 80009b4:	2600      	movs	r6, #0
 80009b6:	42a6      	cmp	r6, r4
 80009b8:	d105      	bne.n	80009c6 <__libc_init_array+0x2e>
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c0:	4798      	blx	r3
 80009c2:	3601      	adds	r6, #1
 80009c4:	e7ee      	b.n	80009a4 <__libc_init_array+0xc>
 80009c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ca:	4798      	blx	r3
 80009cc:	3601      	adds	r6, #1
 80009ce:	e7f2      	b.n	80009b6 <__libc_init_array+0x1e>
 80009d0:	08000a08 	.word	0x08000a08
 80009d4:	08000a08 	.word	0x08000a08
 80009d8:	08000a08 	.word	0x08000a08
 80009dc:	08000a0c 	.word	0x08000a0c

080009e0 <_init>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	bf00      	nop
 80009e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e6:	bc08      	pop	{r3}
 80009e8:	469e      	mov	lr, r3
 80009ea:	4770      	bx	lr

080009ec <_fini>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	bf00      	nop
 80009f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f2:	bc08      	pop	{r3}
 80009f4:	469e      	mov	lr, r3
 80009f6:	4770      	bx	lr
