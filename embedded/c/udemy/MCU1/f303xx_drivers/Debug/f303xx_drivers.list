
f303xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bbc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000d50  08000d50  00010d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d60  08000d60  00010d68  2**0
                  CONTENTS
  4 .ARM          00000000  08000d60  08000d60  00010d68  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d60  08000d68  00010d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d60  08000d60  00010d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d64  08000d64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010d68  2**0
                  CONTENTS
 10 .bss          00000034  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010d68  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013aa  00000000  00000000  00010d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ef  00000000  00000000  00012142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00012538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000158  00000000  00000000  000126c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f0b  00000000  00000000  00012820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018ea  00000000  00000000  0001472b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008964  00000000  00000000  00016015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e979  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005c8  00000000  00000000  0001e9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d38 	.word	0x08000d38

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000d38 	.word	0x08000d38

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SPI2_GPIOInit>:
#include <string.h>

SPI_Handle_t SPIHandle;

// this function is used to initialize the GPIO pins to behave as SPI2 pins
void SPI2_GPIOInit(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOX = GPIOB;
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <SPI2_GPIOInit+0x58>)
 80001ec:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT_FN;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001f2:	2305      	movs	r3, #5
 80001f4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000202:	230d      	movs	r3, #13
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fb59 	bl	80008c0 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800020e:	230f      	movs	r3, #15
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fb53 	bl	80008c0 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800021a:	230e      	movs	r3, #14
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fb4d 	bl	80008c0 <GPIO_Init>

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000226:	230c      	movs	r3, #12
 8000228:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fb47 	bl	80008c0 <GPIO_Init>
}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	48000400 	.word	0x48000400

08000240 <SPI2_Init>:

void SPI2_Init(void) {
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <SPI2_Init+0x58>)
 8000248:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_DeviceBusConfig = SPI_BUS_CONFIG_FD;
 800024a:	2301      	movs	r3, #1
 800024c:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800024e:	2301      	movs	r3, #1
 8000250:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; // generates sclk of 8Mhz
 8000252:	2300      	movs	r3, #0
 8000254:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000256:	2300      	movs	r3, #0
 8000258:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800025e:	2300      	movs	r3, #0
 8000260:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // software slave management enabled for NSS pin
 8000262:	2301      	movs	r3, #1
 8000264:	72bb      	strb	r3, [r7, #10]

	SPI2Handle.RxState = SPI_READY;
 8000266:	2300      	movs	r3, #0
 8000268:	75fb      	strb	r3, [r7, #23]
	SPI2Handle.TxState = SPI_READY;
 800026a:	2300      	movs	r3, #0
 800026c:	75bb      	strb	r3, [r7, #22]
	SPI2Handle.pTxBuffer = NULL;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
	SPI2Handle.TxLength = 0;
 8000272:	2300      	movs	r3, #0
 8000274:	753b      	strb	r3, [r7, #20]

	SPI_Init(&SPI2Handle);
 8000276:	463b      	mov	r3, r7
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f8b7 	bl	80003ec <SPI_Init>

	SPIHandle = SPI2Handle;
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <SPI2_Init+0x5c>)
 8000280:	461d      	mov	r5, r3
 8000282:	463c      	mov	r4, r7
 8000284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000288:	e894 0003 	ldmia.w	r4, {r0, r1}
 800028c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000290:	bf00      	nop
 8000292:	3718      	adds	r7, #24
 8000294:	46bd      	mov	sp, r7
 8000296:	bdb0      	pop	{r4, r5, r7, pc}
 8000298:	40003800 	.word	0x40003800
 800029c:	2000001c 	.word	0x2000001c

080002a0 <main>:

int main(void) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world!";
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <main+0x58>)
 80002a8:	463c      	mov	r4, r7
 80002aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ac:	c407      	stmia	r4!, {r0, r1, r2}
 80002ae:	7023      	strb	r3, [r4, #0]

	SPI2_GPIOInit();
 80002b0:	f7ff ff98 	bl	80001e4 <SPI2_GPIOInit>

	SPI2_Init();
 80002b4:	f7ff ffc4 	bl	8000240 <SPI2_Init>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2, ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	4810      	ldr	r0, [pc, #64]	; (80002fc <main+0x5c>)
 80002bc:	f000 f8f1 	bl	80004a2 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	2024      	movs	r0, #36	; 0x24
 80002c4:	f000 f926 	bl	8000514 <SPI_IRQInterruptConfig>

	//while (1) {

	// enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 80002c8:	2101      	movs	r1, #1
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <main+0x5c>)
 80002cc:	f000 f905 	bl	80004da <SPI_PeripheralControl>

	while (SPI_SendDataIT(&SPIHandle, (uint8_t*) user_data, strlen(user_data)) == SPI_BUSY_IN_TX)
 80002d0:	bf00      	nop
 80002d2:	463b      	mov	r3, r7
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff7d 	bl	80001d4 <strlen>
 80002da:	4602      	mov	r2, r0
 80002dc:	463b      	mov	r3, r7
 80002de:	4619      	mov	r1, r3
 80002e0:	4807      	ldr	r0, [pc, #28]	; (8000300 <main+0x60>)
 80002e2:	f000 f9eb 	bl	80006bc <SPI_SendDataIT>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d0f2      	beq.n	80002d2 <main+0x32>
		;

	SPI_PeripheralControl(SPI2,DISABLE);
 80002ec:	2100      	movs	r1, #0
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <main+0x5c>)
 80002f0:	f000 f8f3 	bl	80004da <SPI_PeripheralControl>


	//SPI_PeripheralControl(SPI2, DISABLE);
	//}

	while (1)
 80002f4:	e7fe      	b.n	80002f4 <main+0x54>
 80002f6:	bf00      	nop
 80002f8:	08000d50 	.word	0x08000d50
 80002fc:	40003800 	.word	0x40003800
 8000300:	2000001c 	.word	0x2000001c

08000304 <SPI2_IRQHandler>:
		;
	return 0;
}

void SPI2_IRQHandler(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPIHandle);
 8000308:	4802      	ldr	r0, [pc, #8]	; (8000314 <SPI2_IRQHandler+0x10>)
 800030a:	f000 f989 	bl	8000620 <SPI_IRQHandling>
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000001c 	.word	0x2000001c

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	; (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 fcd3 	bl	8000cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ffa9 	bl	80002a0 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	08000d68 	.word	0x08000d68
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	20000034 	.word	0x20000034

08000368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC1_2_IRQHandler>
	...

0800036c <SPI_PeriClockControl>:

static void spiTxeInterruptHandle(SPI_Handle_t *pSPIHandle);
static void spiRxneInterruptHandle(SPI_Handle_t *pSPIHandle);
static void spiOvrErrInterruptHandle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d115      	bne.n	80003aa <SPI_PeriClockControl+0x3e>
		if (pSPIx == SPI1) {
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <SPI_PeriClockControl+0x74>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SPI_PeriClockControl+0x78>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <SPI_PeriClockControl+0x78>)
 800038c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000390:	6193      	str	r3, [r2, #24]
			SPI1_PCLK_DI();
		} else if (pSPIx == SPI2) {
			SPI2_PCLK_DI();
		}
	}
}
 8000392:	e01f      	b.n	80003d4 <SPI_PeriClockControl+0x68>
		} else if (pSPIx == SPI2) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <SPI_PeriClockControl+0x7c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d11b      	bne.n	80003d4 <SPI_PeriClockControl+0x68>
			SPI2_PCLK_EN();
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SPI_PeriClockControl+0x78>)
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <SPI_PeriClockControl+0x78>)
 80003a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003a6:	61d3      	str	r3, [r2, #28]
}
 80003a8:	e014      	b.n	80003d4 <SPI_PeriClockControl+0x68>
		if (pSPIx == SPI1) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a0c      	ldr	r2, [pc, #48]	; (80003e0 <SPI_PeriClockControl+0x74>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <SPI_PeriClockControl+0x54>
			SPI1_PCLK_DI();
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <SPI_PeriClockControl+0x78>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <SPI_PeriClockControl+0x78>)
 80003b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003bc:	6193      	str	r3, [r2, #24]
}
 80003be:	e009      	b.n	80003d4 <SPI_PeriClockControl+0x68>
		} else if (pSPIx == SPI2) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <SPI_PeriClockControl+0x7c>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d105      	bne.n	80003d4 <SPI_PeriClockControl+0x68>
			SPI2_PCLK_DI();
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <SPI_PeriClockControl+0x78>)
 80003ca:	69db      	ldr	r3, [r3, #28]
 80003cc:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <SPI_PeriClockControl+0x78>)
 80003ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003d2:	61d3      	str	r3, [r2, #28]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40013000 	.word	0x40013000
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40003800 	.word	0x40003800

080003ec <SPI_Init>:
	} else {
		pSPI->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_Init(SPI_Handle_t *pSPIHandle) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	// peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2101      	movs	r1, #1
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ffb6 	bl	800036c <SPI_PeriClockControl>
	// configure the SOU_CR1 register
	uint32_t tempReg = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]

	// 1. configure the device mode
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	461a      	mov	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	4313      	orrs	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]

	// 2. configure the bus configuration
	if (pSPIHandle->SPIConfig.SPI_DeviceBusConfig == SPI_BUS_CONFIG_FD) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	795b      	ldrb	r3, [r3, #5]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d104      	bne.n	8000424 <SPI_Init+0x38>
		// bidirectional mode should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	e014      	b.n	800044e <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.SPI_DeviceBusConfig == SPI_BUS_CONFIG_HD) {
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	795b      	ldrb	r3, [r3, #5]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d104      	bne.n	8000436 <SPI_Init+0x4a>
		// bidirectional mode should be set
		tempReg |= ~(1 << SPI_CR1_BIDIMODE);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	e00b      	b.n	800044e <SPI_Init+0x62>
	} else if (pSPIHandle->SPIConfig.SPI_DeviceBusConfig == SPI_BUS_CONFIG_S_RXONLY) {
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	795b      	ldrb	r3, [r3, #5]
 800043a:	2b03      	cmp	r3, #3
 800043c:	d107      	bne.n	800044e <SPI_Init+0x62>
		// bidirectional mode should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000444:	60fb      	str	r3, [r7, #12]
		// RXONLY bit must be set
		tempReg |= ~(1 << SPI_CR1_RXONLY);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	f463 6380 	orn	r3, r3, #1024	; 0x400
 800044c:	60fb      	str	r3, [r7, #12]
	}

	// 3. configure the serial clock speed
	tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	799b      	ldrb	r3, [r3, #6]
 8000452:	00db      	lsls	r3, r3, #3
 8000454:	461a      	mov	r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	4313      	orrs	r3, r2
 800045a:	60fb      	str	r3, [r7, #12]

	// 4. configure the DFF
	tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	79db      	ldrb	r3, [r3, #7]
 8000460:	02db      	lsls	r3, r3, #11
 8000462:	461a      	mov	r2, r3
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	4313      	orrs	r3, r2
 8000468:	60fb      	str	r3, [r7, #12]

	// 5. configure the CPOL
	tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	7a1b      	ldrb	r3, [r3, #8]
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4313      	orrs	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]

	// 6. configure the CPHA
	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	7a5b      	ldrb	r3, [r3, #9]
 800047c:	461a      	mov	r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	4313      	orrs	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]

	// 7. configure the SSM
	tempReg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	7a9b      	ldrb	r3, [r3, #10]
 8000488:	025b      	lsls	r3, r3, #9
 800048a:	461a      	mov	r2, r3
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	4313      	orrs	r3, r2
 8000490:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	601a      	str	r2, [r3, #0]
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <SPI_SSOEConfig>:
	}

	return FLAG_RESET;
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPI, uint8_t enOrDi) {
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
 80004aa:	460b      	mov	r3, r1
 80004ac:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE) {
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d106      	bne.n	80004c2 <SPI_SSOEConfig+0x20>
		pSPI->CR2 |= (1 << SPI_CR2_SSOI);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	f043 0204 	orr.w	r2, r3, #4
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	605a      	str	r2, [r3, #4]
	} else {
		pSPI->CR2 &= ~(1 << SPI_CR2_SSOI);
	}
}
 80004c0:	e005      	b.n	80004ce <SPI_SSOEConfig+0x2c>
		pSPI->CR2 &= ~(1 << SPI_CR2_SSOI);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	f023 0204 	bic.w	r2, r3, #4
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	605a      	str	r2, [r3, #4]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <SPI_PeripheralControl>:
			dataPtr++;
		}
	}
}

void SPI_PeripheralControl(SPI_RegDef_t *pSPI, uint8_t enOrDi) {
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	460b      	mov	r3, r1
 80004e4:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE) {
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d106      	bne.n	80004fa <SPI_PeripheralControl+0x20>
		pSPI->CR1 |= (1 << SPI_CR1_SPE);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	601a      	str	r2, [r3, #0]
	} else {
		pSPI->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80004f8:	e005      	b.n	8000506 <SPI_PeripheralControl+0x2c>
		pSPI->CR1 &= ~(1 << SPI_CR1_SPE);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	601a      	str	r2, [r3, #0]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <SPI_IRQInterruptConfig>:
		}
	}
}

// IRQ Configuration and ISR handling
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	71bb      	strb	r3, [r7, #6]
	// it is in the processor part, so we should check processor user reference
	if (EnOrDi == ENABLE) {
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d133      	bne.n	8000592 <SPI_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31) {
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b1f      	cmp	r3, #31
 800052e:	d80a      	bhi.n	8000546 <SPI_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000530:	4b35      	ldr	r3, [pc, #212]	; (8000608 <SPI_IRQInterruptConfig+0xf4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	79fa      	ldrb	r2, [r7, #7]
 8000536:	2101      	movs	r1, #1
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	4611      	mov	r1, r2
 800053e:	4a32      	ldr	r2, [pc, #200]	; (8000608 <SPI_IRQInterruptConfig+0xf4>)
 8000540:	430b      	orrs	r3, r1
 8000542:	6013      	str	r3, [r2, #0]
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
			// program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000544:	e059      	b.n	80005fa <SPI_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b1f      	cmp	r3, #31
 800054a:	d90f      	bls.n	800056c <SPI_IRQInterruptConfig+0x58>
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b3f      	cmp	r3, #63	; 0x3f
 8000550:	d80c      	bhi.n	800056c <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <SPI_IRQInterruptConfig+0xf8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	79fa      	ldrb	r2, [r7, #7]
 8000558:	f002 021f 	and.w	r2, r2, #31
 800055c:	2101      	movs	r1, #1
 800055e:	fa01 f202 	lsl.w	r2, r1, r2
 8000562:	4611      	mov	r1, r2
 8000564:	4a29      	ldr	r2, [pc, #164]	; (800060c <SPI_IRQInterruptConfig+0xf8>)
 8000566:	430b      	orrs	r3, r1
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	e046      	b.n	80005fa <SPI_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	2b3f      	cmp	r3, #63	; 0x3f
 8000570:	d943      	bls.n	80005fa <SPI_IRQInterruptConfig+0xe6>
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	2b5f      	cmp	r3, #95	; 0x5f
 8000576:	d840      	bhi.n	80005fa <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <SPI_IRQInterruptConfig+0xfc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	79fa      	ldrb	r2, [r7, #7]
 800057e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000582:	2101      	movs	r1, #1
 8000584:	fa01 f202 	lsl.w	r2, r1, r2
 8000588:	4611      	mov	r1, r2
 800058a:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SPI_IRQInterruptConfig+0xfc>)
 800058c:	430b      	orrs	r3, r1
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	e033      	b.n	80005fa <SPI_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31) {
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b1f      	cmp	r3, #31
 8000596:	d80a      	bhi.n	80005ae <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <SPI_IRQInterruptConfig+0x100>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	79fa      	ldrb	r2, [r7, #7]
 800059e:	2101      	movs	r1, #1
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <SPI_IRQInterruptConfig+0x100>)
 80005a8:	430b      	orrs	r3, r1
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	e025      	b.n	80005fa <SPI_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b1f      	cmp	r3, #31
 80005b2:	d90f      	bls.n	80005d4 <SPI_IRQInterruptConfig+0xc0>
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b3f      	cmp	r3, #63	; 0x3f
 80005b8:	d80c      	bhi.n	80005d4 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <SPI_IRQInterruptConfig+0x104>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	f002 021f 	and.w	r2, r2, #31
 80005c4:	2101      	movs	r1, #1
 80005c6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <SPI_IRQInterruptConfig+0x104>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	e012      	b.n	80005fa <SPI_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b3f      	cmp	r3, #63	; 0x3f
 80005d8:	d90f      	bls.n	80005fa <SPI_IRQInterruptConfig+0xe6>
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b5f      	cmp	r3, #95	; 0x5f
 80005de:	d80c      	bhi.n	80005fa <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <SPI_IRQInterruptConfig+0x108>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	79fa      	ldrb	r2, [r7, #7]
 80005e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80005ea:	2101      	movs	r1, #1
 80005ec:	fa01 f202 	lsl.w	r2, r1, r2
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <SPI_IRQInterruptConfig+0x108>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	e7ff      	b.n	80005fa <SPI_IRQInterruptConfig+0xe6>
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000e104 	.word	0xe000e104
 8000610:	e000e108 	.word	0xe000e108
 8000614:	e000e180 	.word	0xe000e180
 8000618:	e000e184 	.word	0xe000e184
 800061c:	e000e188 	.word	0xe000e188

08000620 <SPI_IRQHandling>:
	*(NVIC_PR_BASE_ADDR + iprxOffset) |= (IRQPriority << shiftAmount);
}

// ISR - interrupt service routine
// IRQ - interrupt request
void SPI_IRQHandling(SPI_Handle_t *pHandle) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	uint8_t tmp1, tmp2;
	// 1. check the interrupt cause (tx/rx/error)

	// check TXE flag
	tmp1 = pHandle->pSPIx->SR & (1 << SPI_SR_TXE_OFFSET);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	73fb      	strb	r3, [r7, #15]
	tmp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000642:	73bb      	strb	r3, [r7, #14]

	if (tmp1 && tmp2) {
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d006      	beq.n	8000658 <SPI_IRQHandling+0x38>
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <SPI_IRQHandling+0x38>
		// handle TXE
		spiTxeInterruptHandle(pHandle);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f85a 	bl	800070a <spiTxeInterruptHandle>
		return;
 8000656:	e02e      	b.n	80006b6 <SPI_IRQHandling+0x96>
	}

	// check RXNE flag
	tmp1 = pHandle->pSPIx->SR & (1 << SPI_SR_RXNE_OFFSET);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
	tmp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	73bb      	strb	r3, [r7, #14]

	if (tmp1 && tmp2) {
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d006      	beq.n	8000688 <SPI_IRQHandling+0x68>
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <SPI_IRQHandling+0x68>
		// handle RXNE
		spiRxneInterruptHandle(pHandle);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 f87f 	bl	8000784 <spiRxneInterruptHandle>
		return;
 8000686:	e016      	b.n	80006b6 <SPI_IRQHandling+0x96>
	}

	// this time we care only about the overrun error
	tmp1 = pHandle->pSPIx->SR & (1 << SPI_SR_OVR_OFFSET);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000694:	73fb      	strb	r3, [r7, #15]
	tmp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	73bb      	strb	r3, [r7, #14]

	if (tmp1 && tmp2) {
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d005      	beq.n	80006b6 <SPI_IRQHandling+0x96>
 80006aa:	7bbb      	ldrb	r3, [r7, #14]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <SPI_IRQHandling+0x96>
		// handle TXE
		spiOvrErrInterruptHandle(pHandle);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f8ab 	bl	800080c <spiOvrErrInterruptHandle>
	}
}
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SPI_SendDataIT>:

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *dataPtr, uint32_t length) {
 80006bc:	b480      	push	{r7}
 80006be:	b087      	sub	sp, #28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	7d9b      	ldrb	r3, [r3, #22]
 80006cc:	75fb      	strb	r3, [r7, #23]
	if (state == SPI_BUSY_IN_TX) {
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d101      	bne.n	80006d8 <SPI_SendDataIT+0x1c>
		return state;
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	e012      	b.n	80006fe <SPI_SendDataIT+0x42>
	}

	// 1. Save the Tx buffer address and length information in some global variables
	pSPIHandle->pTxBuffer = dataPtr;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLength = length;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	751a      	strb	r2, [r3, #20]

	// 2. Mark the SPI state as busy in transmission
	// so that no other code can take over same SPI peripheral until transmission is over
	pSPIHandle->TxState = SPI_BUSY_IN_TX;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2202      	movs	r2, #2
 80006ea:	759a      	strb	r2, [r3, #22]

	// 3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
	pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006fa:	605a      	str	r2, [r3, #4]

	// 4. Data transmission will be handled by the ISR code (will be implemented later)
	return state;
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	371c      	adds	r7, #28
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <spiTxeInterruptHandle>:

	// 4. Data transmission will be handled by the ISR code (will be implemented later)
	return state;
}

static void spiTxeInterruptHandle(SPI_Handle_t *pSPIHandle) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	// check the DFF bit in CR1
	if ((pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800071c:	2b00      	cmp	r3, #0
 800071e:	d011      	beq.n	8000744 <spiTxeInterruptHandle+0x3a>
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR = *((uint16_t*) pSPIHandle->pTxBuffer);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	881a      	ldrh	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLength -= 2;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7d1b      	ldrb	r3, [r3, #20]
 8000730:	3b02      	subs	r3, #2
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	751a      	strb	r2, [r3, #20]
		(uint16_t*) pSPIHandle->pTxBuffer++;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	e010      	b.n	8000766 <spiTxeInterruptHandle+0x5c>
	} else {
		//8 bit DFF
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLength--;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7d1b      	ldrb	r3, [r3, #20]
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	751a      	strb	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60da      	str	r2, [r3, #12]
	}

	if (pSPIHandle->TxLength == 0) {
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7d1b      	ldrb	r3, [r3, #20]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d106      	bne.n	800077c <spiTxeInterruptHandle+0x72>
		// 1. close the SPI communication
		SPI_CloseTransmission(pSPIHandle);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f864 	bl	800083c <SPI_CloseTransmission>
		// 2. inform the application that tx is over
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_COMPLETE);
 8000774:	2102      	movs	r1, #2
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f896 	bl	80008a8 <SPI_ApplicationEventCallback>
	}
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <spiRxneInterruptHandle>:
static void spiRxneInterruptHandle(SPI_Handle_t *pSPIHandle) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	//do rxing as per the dff
	if (pSPIHandle->pSPIx->CR1 & (1 << 11)) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000796:	2b00      	cmp	r3, #0
 8000798:	d017      	beq.n	80007ca <spiRxneInterruptHandle+0x46>
		//16 bit
		*((uint16_t*) pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68da      	ldr	r2, [r3, #12]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	691b      	ldr	r3, [r3, #16]
 80007a4:	b292      	uxth	r2, r2
 80007a6:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLength -= 2;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7d5b      	ldrb	r3, [r3, #21]
 80007ac:	3b02      	subs	r3, #2
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	755a      	strb	r2, [r3, #21]
		pSPIHandle->pRxBuffer++;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	e011      	b.n	80007ee <spiRxneInterruptHandle+0x6a>

	} else {
		//8 bit
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLength--;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7d5b      	ldrb	r3, [r3, #21]
 80007dc:	3b01      	subs	r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	755a      	strb	r2, [r3, #21]
		pSPIHandle->pRxBuffer++;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	611a      	str	r2, [r3, #16]
	}

	if (pSPIHandle->RxLength == 0) {
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7d5b      	ldrb	r3, [r3, #21]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d106      	bne.n	8000804 <spiRxneInterruptHandle+0x80>
		// 1. close the SPI communication
		SPI_CloseReception(pSPIHandle);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f83b 	bl	8000872 <SPI_CloseReception>

		// 2. inform the application that tx is over
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_COMPLETE);
 80007fc:	2102      	movs	r1, #2
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f852 	bl	80008a8 <SPI_ApplicationEventCallback>
	}
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <spiOvrErrInterruptHandle>:
static void spiOvrErrInterruptHandle(SPI_Handle_t *pSPIHandle) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	uint8_t tmp;

	// 1. clear the ovr flag
	if (pSPIHandle->TxState != SPI_BUSY_IN_TX) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7d9b      	ldrb	r3, [r3, #22]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d007      	beq.n	800082c <spiOvrErrInterruptHandle+0x20>
		tmp = pSPIHandle->pSPIx->DR;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	73fb      	strb	r3, [r7, #15]
		tmp = pSPIHandle->pSPIx->SR;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	73fb      	strb	r3, [r7, #15]
	}

	(void) tmp;

	// 2. inform the application about the error
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 800082c:	2103      	movs	r1, #3
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f000 f83a 	bl	80008a8 <SPI_ApplicationEventCallback>

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <SPI_CloseTransmission>:
	tmp = pSPIx->DR;
	tmp = pSPIx->SR;

	(void) tmp;
}
void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle) {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	// this prevents interrupt from setting up of TXE flag
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	685a      	ldr	r2, [r3, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000852:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLength = 0;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	751a      	strb	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	759a      	strb	r2, [r3, #22]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <SPI_CloseReception>:
void SPI_CloseReception(SPI_Handle_t *pSPIHandle) {
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	// this prevents interrupt from setting up of RXNEIE flag
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000888:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLength = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	755a      	strb	r2, [r3, #21]
	pSPIHandle->RxState = SPI_READY;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	75da      	strb	r2, [r3, #23]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SPI_ApplicationEventCallback>:

__weak void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t event) {
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
	// weak implementation. The application may override this function
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <GPIO_Init>:
 *      Author: kana
 */

#include "stm32f303xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOX, ENABLE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f96e 	bl	8000bb4 <GPIO_PeriClockControl>

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_ANALOG && pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_IN) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	795b      	ldrb	r3, [r3, #5]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d81f      	bhi.n	8000920 <GPIO_Init+0x60>
		// non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	795b      	ldrb	r3, [r3, #5]
 80008e4:	461a      	mov	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOX->MODER &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	4619      	mov	r1, r3
 80008fe:	230b      	movs	r3, #11
 8000900:	408b      	lsls	r3, r1
 8000902:	43db      	mvns	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	400a      	ands	r2, r1
 800090c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOX->MODER |= temp;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	e0a2      	b.n	8000a66 <GPIO_Init+0x1a6>
	} else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	795b      	ldrb	r3, [r3, #5]
 8000924:	2b04      	cmp	r3, #4
 8000926:	d117      	bne.n	8000958 <GPIO_Init+0x98>
			// 1. Configure the falling trigger selection register
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000928:	4b9a      	ldr	r3, [pc, #616]	; (8000b94 <GPIO_Init+0x2d4>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	7912      	ldrb	r2, [r2, #4]
 8000930:	4611      	mov	r1, r2
 8000932:	2201      	movs	r2, #1
 8000934:	408a      	lsls	r2, r1
 8000936:	4611      	mov	r1, r2
 8000938:	4a96      	ldr	r2, [pc, #600]	; (8000b94 <GPIO_Init+0x2d4>)
 800093a:	430b      	orrs	r3, r1
 800093c:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800093e:	4b95      	ldr	r3, [pc, #596]	; (8000b94 <GPIO_Init+0x2d4>)
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	7912      	ldrb	r2, [r2, #4]
 8000946:	4611      	mov	r1, r2
 8000948:	2201      	movs	r2, #1
 800094a:	408a      	lsls	r2, r1
 800094c:	43d2      	mvns	r2, r2
 800094e:	4611      	mov	r1, r2
 8000950:	4a90      	ldr	r2, [pc, #576]	; (8000b94 <GPIO_Init+0x2d4>)
 8000952:	400b      	ands	r3, r1
 8000954:	6093      	str	r3, [r2, #8]
 8000956:	e035      	b.n	80009c4 <GPIO_Init+0x104>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	795b      	ldrb	r3, [r3, #5]
 800095c:	2b05      	cmp	r3, #5
 800095e:	d117      	bne.n	8000990 <GPIO_Init+0xd0>
			// 1. Configure the raising trigger selection register
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000960:	4b8c      	ldr	r3, [pc, #560]	; (8000b94 <GPIO_Init+0x2d4>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	7912      	ldrb	r2, [r2, #4]
 8000968:	4611      	mov	r1, r2
 800096a:	2201      	movs	r2, #1
 800096c:	408a      	lsls	r2, r1
 800096e:	4611      	mov	r1, r2
 8000970:	4a88      	ldr	r2, [pc, #544]	; (8000b94 <GPIO_Init+0x2d4>)
 8000972:	430b      	orrs	r3, r1
 8000974:	6093      	str	r3, [r2, #8]

			// clear the corresponding rtsr bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000976:	4b87      	ldr	r3, [pc, #540]	; (8000b94 <GPIO_Init+0x2d4>)
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	7912      	ldrb	r2, [r2, #4]
 800097e:	4611      	mov	r1, r2
 8000980:	2201      	movs	r2, #1
 8000982:	408a      	lsls	r2, r1
 8000984:	43d2      	mvns	r2, r2
 8000986:	4611      	mov	r1, r2
 8000988:	4a82      	ldr	r2, [pc, #520]	; (8000b94 <GPIO_Init+0x2d4>)
 800098a:	400b      	ands	r3, r1
 800098c:	60d3      	str	r3, [r2, #12]
 800098e:	e019      	b.n	80009c4 <GPIO_Init+0x104>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	795b      	ldrb	r3, [r3, #5]
 8000994:	2b06      	cmp	r3, #6
 8000996:	d115      	bne.n	80009c4 <GPIO_Init+0x104>
			// 1. Configure both falling and raising trigger selection registers
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000998:	4b7e      	ldr	r3, [pc, #504]	; (8000b94 <GPIO_Init+0x2d4>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	7912      	ldrb	r2, [r2, #4]
 80009a0:	4611      	mov	r1, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	408a      	lsls	r2, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	4a7a      	ldr	r2, [pc, #488]	; (8000b94 <GPIO_Init+0x2d4>)
 80009aa:	430b      	orrs	r3, r1
 80009ac:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009ae:	4b79      	ldr	r3, [pc, #484]	; (8000b94 <GPIO_Init+0x2d4>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	7912      	ldrb	r2, [r2, #4]
 80009b6:	4611      	mov	r1, r2
 80009b8:	2201      	movs	r2, #1
 80009ba:	408a      	lsls	r2, r1
 80009bc:	4611      	mov	r1, r2
 80009be:	4a75      	ldr	r2, [pc, #468]	; (8000b94 <GPIO_Init+0x2d4>)
 80009c0:	430b      	orrs	r3, r1
 80009c2:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOX);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009de:	d024      	beq.n	8000a2a <GPIO_Init+0x16a>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a6c      	ldr	r2, [pc, #432]	; (8000b98 <GPIO_Init+0x2d8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d01d      	beq.n	8000a26 <GPIO_Init+0x166>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a6b      	ldr	r2, [pc, #428]	; (8000b9c <GPIO_Init+0x2dc>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d016      	beq.n	8000a22 <GPIO_Init+0x162>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a69      	ldr	r2, [pc, #420]	; (8000ba0 <GPIO_Init+0x2e0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00f      	beq.n	8000a1e <GPIO_Init+0x15e>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a68      	ldr	r2, [pc, #416]	; (8000ba4 <GPIO_Init+0x2e4>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d008      	beq.n	8000a1a <GPIO_Init+0x15a>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a66      	ldr	r2, [pc, #408]	; (8000ba8 <GPIO_Init+0x2e8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <GPIO_Init+0x156>
 8000a12:	2305      	movs	r3, #5
 8000a14:	e00a      	b.n	8000a2c <GPIO_Init+0x16c>
 8000a16:	2300      	movs	r3, #0
 8000a18:	e008      	b.n	8000a2c <GPIO_Init+0x16c>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <GPIO_Init+0x16c>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <GPIO_Init+0x16c>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <GPIO_Init+0x16c>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <GPIO_Init+0x16c>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a2e:	4b5f      	ldr	r3, [pc, #380]	; (8000bac <GPIO_Init+0x2ec>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a5e      	ldr	r2, [pc, #376]	; (8000bac <GPIO_Init+0x2ec>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 3);
 8000a3a:	7c79      	ldrb	r1, [r7, #17]
 8000a3c:	7cba      	ldrb	r2, [r7, #18]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	4099      	lsls	r1, r3
 8000a46:	4a5a      	ldr	r2, [pc, #360]	; (8000bb0 <GPIO_Init+0x2f0>)
 8000a48:	7cfb      	ldrb	r3, [r7, #19]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	6059      	str	r1, [r3, #4]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a50:	4b50      	ldr	r3, [pc, #320]	; (8000b94 <GPIO_Init+0x2d4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	7912      	ldrb	r2, [r2, #4]
 8000a58:	4611      	mov	r1, r2
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	408a      	lsls	r2, r1
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4a4c      	ldr	r2, [pc, #304]	; (8000b94 <GPIO_Init+0x2d4>)
 8000a62:	430b      	orrs	r3, r1
 8000a64:	6013      	str	r3, [r2, #0]
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	799b      	ldrb	r3, [r3, #6]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->OSPEEDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	791b      	ldrb	r3, [r3, #4]
 8000a82:	4619      	mov	r1, r3
 8000a84:	230b      	movs	r3, #11
 8000a86:	408b      	lsls	r3, r1
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	400a      	ands	r2, r1
 8000a92:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDR |= temp;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6899      	ldr	r1, [r3, #8]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	609a      	str	r2, [r3, #8]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	79db      	ldrb	r3, [r3, #7]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->PUPDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68da      	ldr	r2, [r3, #12]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	791b      	ldrb	r3, [r3, #4]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	230b      	movs	r3, #11
 8000ac4:	408b      	lsls	r3, r1
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	4619      	mov	r1, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	400a      	ands	r2, r1
 8000ad0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	68d9      	ldr	r1, [r3, #12]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	60da      	str	r2, [r3, #12]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // multiply by 2 because each pin takes 2 bit fields
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	79db      	ldrb	r3, [r3, #7]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	791b      	ldrb	r3, [r3, #4]
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->MODER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	4619      	mov	r1, r3
 8000afe:	2301      	movs	r3, #1
 8000b00:	408b      	lsls	r3, r1
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6859      	ldr	r1, [r3, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	605a      	str	r2, [r3, #4]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	795b      	ldrb	r3, [r3, #5]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d131      	bne.n	8000b8a <GPIO_Init+0x2ca>
		// configure the alt function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	08db      	lsrs	r3, r3, #3
 8000b2c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	791b      	ldrb	r3, [r3, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOX->AFR[temp1] &= ~(0b1111 << (4 * temp2));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	7c3a      	ldrb	r2, [r7, #16]
 8000b3e:	3208      	adds	r2, #8
 8000b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	7c3a      	ldrb	r2, [r7, #16]
 8000b58:	4001      	ands	r1, r0
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOX->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	7c3a      	ldrb	r2, [r7, #16]
 8000b66:	3208      	adds	r2, #8
 8000b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7a5b      	ldrb	r3, [r3, #9]
 8000b70:	461a      	mov	r2, r3
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	7c3a      	ldrb	r2, [r7, #16]
 8000b82:	4301      	orrs	r1, r0
 8000b84:	3208      	adds	r2, #8
 8000b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010400 	.word	0x40010400
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	48000800 	.word	0x48000800
 8000ba0:	48000c00 	.word	0x48000c00
 8000ba4:	48001000 	.word	0x48001000
 8000ba8:	48001400 	.word	0x48001400
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <GPIO_PeriClockControl>:
//
// @brief - this function enables or disables peripheral clock for the given GPIO port
// @pGPIOx -  base address of the GPIO peripheral
// @EnOrDi - ENABLE or DISABLE macros
//
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d141      	bne.n	8000c4a <GPIO_PeriClockControl+0x96>
		if (pGPIOx == GPIOA) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bcc:	d106      	bne.n	8000bdc <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	6153      	str	r3, [r2, #20]
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 8000bda:	e077      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3f      	ldr	r2, [pc, #252]	; (8000cdc <GPIO_PeriClockControl+0x128>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d106      	bne.n	8000bf2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000be4:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	4a3b      	ldr	r2, [pc, #236]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bee:	6153      	str	r3, [r2, #20]
}
 8000bf0:	e06c      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a3a      	ldr	r2, [pc, #232]	; (8000ce0 <GPIO_PeriClockControl+0x12c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d106      	bne.n	8000c08 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c04:	6153      	str	r3, [r2, #20]
}
 8000c06:	e061      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <GPIO_PeriClockControl+0x130>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d106      	bne.n	8000c1e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000c10:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c1a:	6153      	str	r3, [r2, #20]
}
 8000c1c:	e056      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <GPIO_PeriClockControl+0x134>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d106      	bne.n	8000c34 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c26:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c30:	6153      	str	r3, [r2, #20]
}
 8000c32:	e04b      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a2d      	ldr	r2, [pc, #180]	; (8000cec <GPIO_PeriClockControl+0x138>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d147      	bne.n	8000ccc <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_EN();
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c46:	6153      	str	r3, [r2, #20]
}
 8000c48:	e040      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c50:	d106      	bne.n	8000c60 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c5c:	6153      	str	r3, [r2, #20]
}
 8000c5e:	e035      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <GPIO_PeriClockControl+0x128>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d106      	bne.n	8000c76 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c72:	6153      	str	r3, [r2, #20]
}
 8000c74:	e02a      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <GPIO_PeriClockControl+0x12c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d106      	bne.n	8000c8c <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c84:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000c88:	6153      	str	r3, [r2, #20]
}
 8000c8a:	e01f      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a15      	ldr	r2, [pc, #84]	; (8000ce4 <GPIO_PeriClockControl+0x130>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d106      	bne.n	8000ca2 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000c9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c9e:	6153      	str	r3, [r2, #20]
}
 8000ca0:	e014      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <GPIO_PeriClockControl+0x134>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d106      	bne.n	8000cb8 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000cb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000cb4:	6153      	str	r3, [r2, #20]
}
 8000cb6:	e009      	b.n	8000ccc <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <GPIO_PeriClockControl+0x138>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d105      	bne.n	8000ccc <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_DI();
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <GPIO_PeriClockControl+0x124>)
 8000cc6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000cca:	6153      	str	r3, [r2, #20]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	48000c00 	.word	0x48000c00
 8000ce8:	48001000 	.word	0x48001000
 8000cec:	48001400 	.word	0x48001400

08000cf0 <__libc_init_array>:
 8000cf0:	b570      	push	{r4, r5, r6, lr}
 8000cf2:	4d0d      	ldr	r5, [pc, #52]	; (8000d28 <__libc_init_array+0x38>)
 8000cf4:	4c0d      	ldr	r4, [pc, #52]	; (8000d2c <__libc_init_array+0x3c>)
 8000cf6:	1b64      	subs	r4, r4, r5
 8000cf8:	10a4      	asrs	r4, r4, #2
 8000cfa:	2600      	movs	r6, #0
 8000cfc:	42a6      	cmp	r6, r4
 8000cfe:	d109      	bne.n	8000d14 <__libc_init_array+0x24>
 8000d00:	4d0b      	ldr	r5, [pc, #44]	; (8000d30 <__libc_init_array+0x40>)
 8000d02:	4c0c      	ldr	r4, [pc, #48]	; (8000d34 <__libc_init_array+0x44>)
 8000d04:	f000 f818 	bl	8000d38 <_init>
 8000d08:	1b64      	subs	r4, r4, r5
 8000d0a:	10a4      	asrs	r4, r4, #2
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	42a6      	cmp	r6, r4
 8000d10:	d105      	bne.n	8000d1e <__libc_init_array+0x2e>
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
 8000d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d18:	4798      	blx	r3
 8000d1a:	3601      	adds	r6, #1
 8000d1c:	e7ee      	b.n	8000cfc <__libc_init_array+0xc>
 8000d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d22:	4798      	blx	r3
 8000d24:	3601      	adds	r6, #1
 8000d26:	e7f2      	b.n	8000d0e <__libc_init_array+0x1e>
 8000d28:	08000d60 	.word	0x08000d60
 8000d2c:	08000d60 	.word	0x08000d60
 8000d30:	08000d60 	.word	0x08000d60
 8000d34:	08000d64 	.word	0x08000d64

08000d38 <_init>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	bf00      	nop
 8000d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3e:	bc08      	pop	{r3}
 8000d40:	469e      	mov	lr, r3
 8000d42:	4770      	bx	lr

08000d44 <_fini>:
 8000d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d46:	bf00      	nop
 8000d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4a:	bc08      	pop	{r3}
 8000d4c:	469e      	mov	lr, r3
 8000d4e:	4770      	bx	lr
