
f303xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000968  08000970  00010970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000968  08000968  00010970  2**0
                  CONTENTS
  4 .ARM          00000000  08000968  08000968  00010970  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000968  08000970  00010970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000968  08000968  00010968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800096c  0800096c  0001096c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010970  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010970  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a0c  00000000  00000000  000109a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000273  00000000  00000000  000113ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00011620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  000116e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f92  00000000  00000000  00011788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fa6  00000000  00000000  0001371a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008965  00000000  00000000  000146c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001d025  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000288  00000000  00000000  0001d078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000950 	.word	0x08000950

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000950 	.word	0x08000950

080001d4 <delay>:
 */

#include <string.h>
#include "stm32f303xx_gpio_driver.h"

void delay(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000/2; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	0003d08f 	.word	0x0003d08f

08000200 <main>:

int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLED, GPIOBtn;

	memset(&GpioLED, 0, sizeof(GpioLED));
 8000206:	f107 030c 	add.w	r3, r7, #12
 800020a:	220c      	movs	r2, #12
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fb96 	bl	8000940 <memset>
	memset(&GPIOBtn, 0, sizeof(GPIOBtn));
 8000214:	463b      	mov	r3, r7
 8000216:	220c      	movs	r2, #12
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fb90 	bl	8000940 <memset>

	GpioLED.pGPIOX = GPIOE;
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <main+0x84>)
 8000222:	60fb      	str	r3, [r7, #12]
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 8000224:	230b      	movs	r3, #11
 8000226:	743b      	strb	r3, [r7, #16]
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000228:	2301      	movs	r3, #1
 800022a:	747b      	strb	r3, [r7, #17]
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022c:	2302      	movs	r3, #2
 800022e:	74bb      	strb	r3, [r7, #18]
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000230:	2300      	movs	r3, #0
 8000232:	753b      	strb	r3, [r7, #20]
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000234:	2300      	movs	r3, #0
 8000236:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOE, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	4812      	ldr	r0, [pc, #72]	; (8000284 <main+0x84>)
 800023c:	f000 f9d8 	bl	80005f0 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLED);
 8000240:	f107 030c 	add.w	r3, r7, #12
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f859 	bl	80002fc <GPIO_Init>

	GPIOBtn.pGPIOX = GPIOA;
 800024a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024e:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000250:	2300      	movs	r3, #0
 8000252:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 8000254:	2305      	movs	r3, #5
 8000256:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000258:	2302      	movs	r3, #2
 800025a:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PD;
 800025c:	2302      	movs	r3, #2
 800025e:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000260:	2101      	movs	r1, #1
 8000262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000266:	f000 f9c3 	bl	80005f0 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 800026a:	463b      	mov	r3, r7
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f845 	bl	80002fc <GPIO_Init>

	// IRQ configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRIO12);
 8000272:	210c      	movs	r1, #12
 8000274:	2006      	movs	r0, #6
 8000276:	f000 faf5 	bl	8000864 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 800027a:	2101      	movs	r1, #1
 800027c:	2006      	movs	r0, #6
 800027e:	f000 fa6b 	bl	8000758 <GPIO_IRQInterruptConfig>


	while(1);
 8000282:	e7fe      	b.n	8000282 <main+0x82>
 8000284:	48001000 	.word	0x48001000

08000288 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	delay();
 800028c:	f7ff ffa2 	bl	80001d4 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000290:	2000      	movs	r0, #0
 8000292:	f000 fb11 	bl	80008b8 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOE, GPIO_PIN_NO_11);
 8000296:	210b      	movs	r1, #11
 8000298:	4802      	ldr	r0, [pc, #8]	; (80002a4 <EXTI0_IRQHandler+0x1c>)
 800029a:	f000 fa47 	bl	800072c <GPIO_ToggleOutputPin>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	48001000 	.word	0x48001000

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fb0f 	bl	80008f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff91 	bl	8000200 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000970 	.word	0x08000970
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <GPIO_Init>:
 *      Author: kana
 */

#include "stm32f303xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOX, ENABLE);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2101      	movs	r1, #1
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f96e 	bl	80005f0 <GPIO_PeriClockControl>

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_ANALOG && pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_IN) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	795b      	ldrb	r3, [r3, #5]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d81f      	bhi.n	800035c <GPIO_Init+0x60>
		// non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	461a      	mov	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	791b      	ldrb	r3, [r3, #4]
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	fa02 f303 	lsl.w	r3, r2, r3
 800032c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOX->MODER &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	4619      	mov	r1, r3
 800033a:	230b      	movs	r3, #11
 800033c:	408b      	lsls	r3, r1
 800033e:	43db      	mvns	r3, r3
 8000340:	4619      	mov	r1, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	400a      	ands	r2, r1
 8000348:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOX->MODER |= temp;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	6819      	ldr	r1, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	697a      	ldr	r2, [r7, #20]
 8000356:	430a      	orrs	r2, r1
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	e0a2      	b.n	80004a2 <GPIO_Init+0x1a6>
	} else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	795b      	ldrb	r3, [r3, #5]
 8000360:	2b04      	cmp	r3, #4
 8000362:	d117      	bne.n	8000394 <GPIO_Init+0x98>
			// 1. Configure the falling trigger selection register
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000364:	4b9a      	ldr	r3, [pc, #616]	; (80005d0 <GPIO_Init+0x2d4>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	7912      	ldrb	r2, [r2, #4]
 800036c:	4611      	mov	r1, r2
 800036e:	2201      	movs	r2, #1
 8000370:	408a      	lsls	r2, r1
 8000372:	4611      	mov	r1, r2
 8000374:	4a96      	ldr	r2, [pc, #600]	; (80005d0 <GPIO_Init+0x2d4>)
 8000376:	430b      	orrs	r3, r1
 8000378:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800037a:	4b95      	ldr	r3, [pc, #596]	; (80005d0 <GPIO_Init+0x2d4>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	7912      	ldrb	r2, [r2, #4]
 8000382:	4611      	mov	r1, r2
 8000384:	2201      	movs	r2, #1
 8000386:	408a      	lsls	r2, r1
 8000388:	43d2      	mvns	r2, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a90      	ldr	r2, [pc, #576]	; (80005d0 <GPIO_Init+0x2d4>)
 800038e:	400b      	ands	r3, r1
 8000390:	6093      	str	r3, [r2, #8]
 8000392:	e035      	b.n	8000400 <GPIO_Init+0x104>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	795b      	ldrb	r3, [r3, #5]
 8000398:	2b05      	cmp	r3, #5
 800039a:	d117      	bne.n	80003cc <GPIO_Init+0xd0>
			// 1. Configure the raising trigger selection register
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800039c:	4b8c      	ldr	r3, [pc, #560]	; (80005d0 <GPIO_Init+0x2d4>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	7912      	ldrb	r2, [r2, #4]
 80003a4:	4611      	mov	r1, r2
 80003a6:	2201      	movs	r2, #1
 80003a8:	408a      	lsls	r2, r1
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a88      	ldr	r2, [pc, #544]	; (80005d0 <GPIO_Init+0x2d4>)
 80003ae:	430b      	orrs	r3, r1
 80003b0:	6093      	str	r3, [r2, #8]

			// clear the corresponding rtsr bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003b2:	4b87      	ldr	r3, [pc, #540]	; (80005d0 <GPIO_Init+0x2d4>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	7912      	ldrb	r2, [r2, #4]
 80003ba:	4611      	mov	r1, r2
 80003bc:	2201      	movs	r2, #1
 80003be:	408a      	lsls	r2, r1
 80003c0:	43d2      	mvns	r2, r2
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a82      	ldr	r2, [pc, #520]	; (80005d0 <GPIO_Init+0x2d4>)
 80003c6:	400b      	ands	r3, r1
 80003c8:	60d3      	str	r3, [r2, #12]
 80003ca:	e019      	b.n	8000400 <GPIO_Init+0x104>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b06      	cmp	r3, #6
 80003d2:	d115      	bne.n	8000400 <GPIO_Init+0x104>
			// 1. Configure both falling and raising trigger selection registers
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d4:	4b7e      	ldr	r3, [pc, #504]	; (80005d0 <GPIO_Init+0x2d4>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	7912      	ldrb	r2, [r2, #4]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a7a      	ldr	r2, [pc, #488]	; (80005d0 <GPIO_Init+0x2d4>)
 80003e6:	430b      	orrs	r3, r1
 80003e8:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ea:	4b79      	ldr	r3, [pc, #484]	; (80005d0 <GPIO_Init+0x2d4>)
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	7912      	ldrb	r2, [r2, #4]
 80003f2:	4611      	mov	r1, r2
 80003f4:	2201      	movs	r2, #1
 80003f6:	408a      	lsls	r2, r1
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a75      	ldr	r2, [pc, #468]	; (80005d0 <GPIO_Init+0x2d4>)
 80003fc:	430b      	orrs	r3, r1
 80003fe:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	089b      	lsrs	r3, r3, #2
 8000406:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	791b      	ldrb	r3, [r3, #4]
 800040c:	f003 0303 	and.w	r3, r3, #3
 8000410:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOX);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800041a:	d024      	beq.n	8000466 <GPIO_Init+0x16a>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a6c      	ldr	r2, [pc, #432]	; (80005d4 <GPIO_Init+0x2d8>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d01d      	beq.n	8000462 <GPIO_Init+0x166>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a6b      	ldr	r2, [pc, #428]	; (80005d8 <GPIO_Init+0x2dc>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d016      	beq.n	800045e <GPIO_Init+0x162>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a69      	ldr	r2, [pc, #420]	; (80005dc <GPIO_Init+0x2e0>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d00f      	beq.n	800045a <GPIO_Init+0x15e>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a68      	ldr	r2, [pc, #416]	; (80005e0 <GPIO_Init+0x2e4>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d008      	beq.n	8000456 <GPIO_Init+0x15a>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a66      	ldr	r2, [pc, #408]	; (80005e4 <GPIO_Init+0x2e8>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d101      	bne.n	8000452 <GPIO_Init+0x156>
 800044e:	2305      	movs	r3, #5
 8000450:	e00a      	b.n	8000468 <GPIO_Init+0x16c>
 8000452:	2300      	movs	r3, #0
 8000454:	e008      	b.n	8000468 <GPIO_Init+0x16c>
 8000456:	2304      	movs	r3, #4
 8000458:	e006      	b.n	8000468 <GPIO_Init+0x16c>
 800045a:	2303      	movs	r3, #3
 800045c:	e004      	b.n	8000468 <GPIO_Init+0x16c>
 800045e:	2302      	movs	r3, #2
 8000460:	e002      	b.n	8000468 <GPIO_Init+0x16c>
 8000462:	2301      	movs	r3, #1
 8000464:	e000      	b.n	8000468 <GPIO_Init+0x16c>
 8000466:	2300      	movs	r3, #0
 8000468:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800046a:	4b5f      	ldr	r3, [pc, #380]	; (80005e8 <GPIO_Init+0x2ec>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a5e      	ldr	r2, [pc, #376]	; (80005e8 <GPIO_Init+0x2ec>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 3);
 8000476:	7c79      	ldrb	r1, [r7, #17]
 8000478:	7cba      	ldrb	r2, [r7, #18]
 800047a:	4613      	mov	r3, r2
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	4413      	add	r3, r2
 8000480:	4099      	lsls	r1, r3
 8000482:	4a5a      	ldr	r2, [pc, #360]	; (80005ec <GPIO_Init+0x2f0>)
 8000484:	7cfb      	ldrb	r3, [r7, #19]
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4413      	add	r3, r2
 800048a:	6059      	str	r1, [r3, #4]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800048c:	4b50      	ldr	r3, [pc, #320]	; (80005d0 <GPIO_Init+0x2d4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	7912      	ldrb	r2, [r2, #4]
 8000494:	4611      	mov	r1, r2
 8000496:	2201      	movs	r2, #1
 8000498:	408a      	lsls	r2, r1
 800049a:	4611      	mov	r1, r2
 800049c:	4a4c      	ldr	r2, [pc, #304]	; (80005d0 <GPIO_Init+0x2d4>)
 800049e:	430b      	orrs	r3, r1
 80004a0:	6013      	str	r3, [r2, #0]
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	799b      	ldrb	r3, [r3, #6]
 80004a6:	461a      	mov	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	fa02 f303 	lsl.w	r3, r2, r3
 80004b2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->OSPEEDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	689a      	ldr	r2, [r3, #8]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	4619      	mov	r1, r3
 80004c0:	230b      	movs	r3, #11
 80004c2:	408b      	lsls	r3, r1
 80004c4:	43db      	mvns	r3, r3
 80004c6:	4619      	mov	r1, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	400a      	ands	r2, r1
 80004ce:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDR |= temp;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6899      	ldr	r1, [r3, #8]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	430a      	orrs	r2, r1
 80004de:	609a      	str	r2, [r3, #8]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	79db      	ldrb	r3, [r3, #7]
 80004e4:	461a      	mov	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->PUPDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68da      	ldr	r2, [r3, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	4619      	mov	r1, r3
 80004fe:	230b      	movs	r3, #11
 8000500:	408b      	lsls	r3, r1
 8000502:	43db      	mvns	r3, r3
 8000504:	4619      	mov	r1, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	400a      	ands	r2, r1
 800050c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	68d9      	ldr	r1, [r3, #12]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	697a      	ldr	r2, [r7, #20]
 800051a:	430a      	orrs	r2, r1
 800051c:	60da      	str	r2, [r3, #12]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // multiply by 2 because each pin takes 2 bit fields
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	79db      	ldrb	r3, [r3, #7]
 8000522:	461a      	mov	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->MODER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	4619      	mov	r1, r3
 800053a:	2301      	movs	r3, #1
 800053c:	408b      	lsls	r3, r1
 800053e:	43db      	mvns	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	400a      	ands	r2, r1
 8000548:	601a      	str	r2, [r3, #0]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	6859      	ldr	r1, [r3, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	430a      	orrs	r2, r1
 8000558:	605a      	str	r2, [r3, #4]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d131      	bne.n	80005c6 <GPIO_Init+0x2ca>
		// configure the alt function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	08db      	lsrs	r3, r3, #3
 8000568:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOX->AFR[temp1] &= ~(0b1111 << (4 * temp2));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	7c3a      	ldrb	r2, [r7, #16]
 800057a:	3208      	adds	r2, #8
 800057c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	220f      	movs	r2, #15
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	7c3a      	ldrb	r2, [r7, #16]
 8000594:	4001      	ands	r1, r0
 8000596:	3208      	adds	r2, #8
 8000598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOX->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	7c3a      	ldrb	r2, [r7, #16]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7a5b      	ldrb	r3, [r3, #9]
 80005ac:	461a      	mov	r2, r3
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	7c3a      	ldrb	r2, [r7, #16]
 80005be:	4301      	orrs	r1, r0
 80005c0:	3208      	adds	r2, #8
 80005c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40010400 	.word	0x40010400
 80005d4:	48000400 	.word	0x48000400
 80005d8:	48000800 	.word	0x48000800
 80005dc:	48000c00 	.word	0x48000c00
 80005e0:	48001000 	.word	0x48001000
 80005e4:	48001400 	.word	0x48001400
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010000 	.word	0x40010000

080005f0 <GPIO_PeriClockControl>:
//
// @brief - this function enables or disables peripheral clock for the given GPIO port
// @pGPIOx -  base address of the GPIO peripheral
// @EnOrDi - ENABLE or DISABLE macros
//
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d141      	bne.n	8000686 <GPIO_PeriClockControl+0x96>
		if (pGPIOx == GPIOA) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000608:	d106      	bne.n	8000618 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800060a:	4b42      	ldr	r3, [pc, #264]	; (8000714 <GPIO_PeriClockControl+0x124>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a41      	ldr	r2, [pc, #260]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000614:	6153      	str	r3, [r2, #20]
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 8000616:	e077      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a3f      	ldr	r2, [pc, #252]	; (8000718 <GPIO_PeriClockControl+0x128>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000620:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	4a3b      	ldr	r2, [pc, #236]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800062a:	6153      	str	r3, [r2, #20]
}
 800062c:	e06c      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a3a      	ldr	r2, [pc, #232]	; (800071c <GPIO_PeriClockControl+0x12c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a36      	ldr	r2, [pc, #216]	; (8000714 <GPIO_PeriClockControl+0x124>)
 800063c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000640:	6153      	str	r3, [r2, #20]
}
 8000642:	e061      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a36      	ldr	r2, [pc, #216]	; (8000720 <GPIO_PeriClockControl+0x130>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <GPIO_PeriClockControl+0x124>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a30      	ldr	r2, [pc, #192]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000656:	6153      	str	r3, [r2, #20]
}
 8000658:	e056      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a31      	ldr	r2, [pc, #196]	; (8000724 <GPIO_PeriClockControl+0x134>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000662:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066c:	6153      	str	r3, [r2, #20]
}
 800066e:	e04b      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a2d      	ldr	r2, [pc, #180]	; (8000728 <GPIO_PeriClockControl+0x138>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d147      	bne.n	8000708 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_EN();
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <GPIO_PeriClockControl+0x124>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a25      	ldr	r2, [pc, #148]	; (8000714 <GPIO_PeriClockControl+0x124>)
 800067e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000682:	6153      	str	r3, [r2, #20]
}
 8000684:	e040      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800068c:	d106      	bne.n	800069c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a20      	ldr	r2, [pc, #128]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000694:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000698:	6153      	str	r3, [r2, #20]
}
 800069a:	e035      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <GPIO_PeriClockControl+0x128>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <GPIO_PeriClockControl+0x124>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <GPIO_PeriClockControl+0x124>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6153      	str	r3, [r2, #20]
}
 80006b0:	e02a      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <GPIO_PeriClockControl+0x12c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <GPIO_PeriClockControl+0x124>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <GPIO_PeriClockControl+0x124>)
 80006c0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80006c4:	6153      	str	r3, [r2, #20]
}
 80006c6:	e01f      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <GPIO_PeriClockControl+0x130>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d106      	bne.n	80006de <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <GPIO_PeriClockControl+0x124>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <GPIO_PeriClockControl+0x124>)
 80006d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006da:	6153      	str	r3, [r2, #20]
}
 80006dc:	e014      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <GPIO_PeriClockControl+0x134>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d106      	bne.n	80006f4 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <GPIO_PeriClockControl+0x124>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <GPIO_PeriClockControl+0x124>)
 80006ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80006f0:	6153      	str	r3, [r2, #20]
}
 80006f2:	e009      	b.n	8000708 <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <GPIO_PeriClockControl+0x138>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d105      	bne.n	8000708 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_DI();
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <GPIO_PeriClockControl+0x124>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <GPIO_PeriClockControl+0x124>)
 8000702:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000706:	6153      	str	r3, [r2, #20]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	48000800 	.word	0x48000800
 8000720:	48000c00 	.word	0x48000c00
 8000724:	48001000 	.word	0x48001000
 8000728:	48001400 	.word	0x48001400

0800072c <GPIO_ToggleOutputPin>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value) {
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	78fa      	ldrb	r2, [r7, #3]
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	405a      	eors	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	615a      	str	r2, [r3, #20]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	71bb      	strb	r3, [r7, #6]
	// it is in the processor part, so we should check processor user reference
	if (EnOrDi == ENABLE) {
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d133      	bne.n	80007d6 <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b1f      	cmp	r3, #31
 8000772:	d80a      	bhi.n	800078a <GPIO_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000774:	4b35      	ldr	r3, [pc, #212]	; (800084c <GPIO_IRQInterruptConfig+0xf4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	79fa      	ldrb	r2, [r7, #7]
 800077a:	2101      	movs	r1, #1
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	4611      	mov	r1, r2
 8000782:	4a32      	ldr	r2, [pc, #200]	; (800084c <GPIO_IRQInterruptConfig+0xf4>)
 8000784:	430b      	orrs	r3, r1
 8000786:	6013      	str	r3, [r2, #0]
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
			// program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000788:	e059      	b.n	800083e <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b1f      	cmp	r3, #31
 800078e:	d90f      	bls.n	80007b0 <GPIO_IRQInterruptConfig+0x58>
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b3f      	cmp	r3, #63	; 0x3f
 8000794:	d80c      	bhi.n	80007b0 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <GPIO_IRQInterruptConfig+0xf8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	79fa      	ldrb	r2, [r7, #7]
 800079c:	f002 021f 	and.w	r2, r2, #31
 80007a0:	2101      	movs	r1, #1
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a29      	ldr	r2, [pc, #164]	; (8000850 <GPIO_IRQInterruptConfig+0xf8>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	e046      	b.n	800083e <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b3f      	cmp	r3, #63	; 0x3f
 80007b4:	d943      	bls.n	800083e <GPIO_IRQInterruptConfig+0xe6>
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b5f      	cmp	r3, #95	; 0x5f
 80007ba:	d840      	bhi.n	800083e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <GPIO_IRQInterruptConfig+0xfc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007c6:	2101      	movs	r1, #1
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a21      	ldr	r2, [pc, #132]	; (8000854 <GPIO_IRQInterruptConfig+0xfc>)
 80007d0:	430b      	orrs	r3, r1
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	e033      	b.n	800083e <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b1f      	cmp	r3, #31
 80007da:	d80a      	bhi.n	80007f2 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <GPIO_IRQInterruptConfig+0x100>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	79fa      	ldrb	r2, [r7, #7]
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <GPIO_IRQInterruptConfig+0x100>)
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	e025      	b.n	800083e <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b1f      	cmp	r3, #31
 80007f6:	d90f      	bls.n	8000818 <GPIO_IRQInterruptConfig+0xc0>
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b3f      	cmp	r3, #63	; 0x3f
 80007fc:	d80c      	bhi.n	8000818 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <GPIO_IRQInterruptConfig+0x104>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	79fa      	ldrb	r2, [r7, #7]
 8000804:	f002 021f 	and.w	r2, r2, #31
 8000808:	2101      	movs	r1, #1
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	4611      	mov	r1, r2
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <GPIO_IRQInterruptConfig+0x104>)
 8000812:	430b      	orrs	r3, r1
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	e012      	b.n	800083e <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b3f      	cmp	r3, #63	; 0x3f
 800081c:	d90f      	bls.n	800083e <GPIO_IRQInterruptConfig+0xe6>
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b5f      	cmp	r3, #95	; 0x5f
 8000822:	d80c      	bhi.n	800083e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <GPIO_IRQInterruptConfig+0x108>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	4611      	mov	r1, r2
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <GPIO_IRQInterruptConfig+0x108>)
 8000838:	430b      	orrs	r3, r1
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	e7ff      	b.n	800083e <GPIO_IRQInterruptConfig+0xe6>
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000e104 	.word	0xe000e104
 8000854:	e000e108 	.word	0xe000e108
 8000858:	e000e180 	.word	0xe000e180
 800085c:	e000e184 	.word	0xe000e184
 8000860:	e000e188 	.word	0xe000e188

08000864 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
	// 1. Find out the ipr register
	uint8_t iprxOffset = IRQNumber / 4; // offset of the priority register. 4 - cuz each register is 32 bits
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	089b      	lsrs	r3, r3, #2
 8000874:	73fb      	strb	r3, [r7, #15]
	uint8_t iprxSection = IRQNumber % 4 * 8; // each register has 4 blocks, each block has 8 bits
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	73bb      	strb	r3, [r7, #14]

	uint8_t shiftAmount = iprxSection + (8 - NO_PR_BITS_IMPLEMENTED);
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	3304      	adds	r3, #4
 8000886:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprxOffset) |= (IRQPriority << shiftAmount);
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000890:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000894:	6819      	ldr	r1, [r3, #0]
 8000896:	7b7b      	ldrb	r3, [r7, #13]
 8000898:	683a      	ldr	r2, [r7, #0]
 800089a:	409a      	lsls	r2, r3
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008a4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008a8:	430a      	orrs	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
	// clear the existing pr register corresponding to the pin number
	if (EXTI->PR1 & (1 << PinNumber)) {
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <GPIO_IRQHandling+0x3c>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	79fa      	ldrb	r2, [r7, #7]
 80008c8:	2101      	movs	r1, #1
 80008ca:	fa01 f202 	lsl.w	r2, r1, r2
 80008ce:	4013      	ands	r3, r2
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d009      	beq.n	80008e8 <GPIO_IRQHandling+0x30>
		// clear
		EXTI->PR1 |= (1 << PinNumber);
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <GPIO_IRQHandling+0x3c>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	79fa      	ldrb	r2, [r7, #7]
 80008da:	2101      	movs	r1, #1
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	4611      	mov	r1, r2
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <GPIO_IRQHandling+0x3c>)
 80008e4:	430b      	orrs	r3, r1
 80008e6:	6153      	str	r3, [r2, #20]
	}
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	40010400 	.word	0x40010400

080008f8 <__libc_init_array>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4d0d      	ldr	r5, [pc, #52]	; (8000930 <__libc_init_array+0x38>)
 80008fc:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <__libc_init_array+0x3c>)
 80008fe:	1b64      	subs	r4, r4, r5
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	2600      	movs	r6, #0
 8000904:	42a6      	cmp	r6, r4
 8000906:	d109      	bne.n	800091c <__libc_init_array+0x24>
 8000908:	4d0b      	ldr	r5, [pc, #44]	; (8000938 <__libc_init_array+0x40>)
 800090a:	4c0c      	ldr	r4, [pc, #48]	; (800093c <__libc_init_array+0x44>)
 800090c:	f000 f820 	bl	8000950 <_init>
 8000910:	1b64      	subs	r4, r4, r5
 8000912:	10a4      	asrs	r4, r4, #2
 8000914:	2600      	movs	r6, #0
 8000916:	42a6      	cmp	r6, r4
 8000918:	d105      	bne.n	8000926 <__libc_init_array+0x2e>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000920:	4798      	blx	r3
 8000922:	3601      	adds	r6, #1
 8000924:	e7ee      	b.n	8000904 <__libc_init_array+0xc>
 8000926:	f855 3b04 	ldr.w	r3, [r5], #4
 800092a:	4798      	blx	r3
 800092c:	3601      	adds	r6, #1
 800092e:	e7f2      	b.n	8000916 <__libc_init_array+0x1e>
 8000930:	08000968 	.word	0x08000968
 8000934:	08000968 	.word	0x08000968
 8000938:	08000968 	.word	0x08000968
 800093c:	0800096c 	.word	0x0800096c

08000940 <memset>:
 8000940:	4402      	add	r2, r0
 8000942:	4603      	mov	r3, r0
 8000944:	4293      	cmp	r3, r2
 8000946:	d100      	bne.n	800094a <memset+0xa>
 8000948:	4770      	bx	lr
 800094a:	f803 1b01 	strb.w	r1, [r3], #1
 800094e:	e7f9      	b.n	8000944 <memset+0x4>

08000950 <_init>:
 8000950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000952:	bf00      	nop
 8000954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000956:	bc08      	pop	{r3}
 8000958:	469e      	mov	lr, r3
 800095a:	4770      	bx	lr

0800095c <_fini>:
 800095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095e:	bf00      	nop
 8000960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000962:	bc08      	pop	{r3}
 8000964:	469e      	mov	lr, r3
 8000966:	4770      	bx	lr
