
f303xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a34  08000a34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a34  08000a34  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000a34  08000a34  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a34  08000a34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a34  08000a34  00010a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a38  08000a38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000028  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001195  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000440  00000000  00000000  000211d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00021618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000120  00000000  00000000  00021770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002060  00000000  00000000  00021890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000174d  00000000  00000000  000238f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008bdd  00000000  00000000  0002503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002dc1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004b4  00000000  00000000  0002dc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a1c 	.word	0x08000a1c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08000a1c 	.word	0x08000a1c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:

I2C_Handle_t I2C1_Handle;

uint8_t someData[] = "testing string\n";

void delay(void) {
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000 / 2; i++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <delay+0x12>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <delay+0x28>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d9f8      	bls.n	80001f0 <delay+0xc>
		;
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	0003d08f 	.word	0x0003d08f

08000210 <I2C1_GPIOInit>:

// this function is used to initialize the GPIO pins to behave as I2C pins
// PB6 -> SCL
// PB9 -> SDA
void I2C1_GPIOInit(void) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOX = GPIOB;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <I2C1_GPIOInit+0x40>)
 8000218:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT_FN;
 800021a:	2302      	movs	r3, #2
 800021c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800021e:	2301      	movs	r3, #1
 8000220:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000222:	2301      	movs	r3, #1
 8000224:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000226:	2304      	movs	r3, #4
 8000228:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022a:	2302      	movs	r3, #2
 800022c:	72bb      	strb	r3, [r7, #10]

	// scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800022e:	2306      	movs	r3, #6
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f88b 	bl	8000350 <GPIO_Init>

	// sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800023a:	2309      	movs	r3, #9
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f885 	bl	8000350 <GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	48000400 	.word	0x48000400

08000254 <I2C1_Init>:

void I2C1_Init(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	I2C1_Handle.pI2Cx = I2C1;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <I2C1_Init+0x2c>)
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <I2C1_Init+0x30>)
 800025c:	601a      	str	r2, [r3, #0]
	I2C1_Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <I2C1_Init+0x2c>)
 8000260:	2201      	movs	r2, #1
 8000262:	725a      	strb	r2, [r3, #9]
	I2C1_Handle.I2C_Config.I2C_DeviceAddress = 0x61; // is not required for the master
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <I2C1_Init+0x2c>)
 8000266:	2261      	movs	r2, #97	; 0x61
 8000268:	721a      	strb	r2, [r3, #8]
	I2C1_Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <I2C1_Init+0x2c>)
 800026c:	2200      	movs	r2, #0
 800026e:	815a      	strh	r2, [r3, #10]
	I2C1_Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SLEED_SM;
 8000270:	4b03      	ldr	r3, [pc, #12]	; (8000280 <I2C1_Init+0x2c>)
 8000272:	4a05      	ldr	r2, [pc, #20]	; (8000288 <I2C1_Init+0x34>)
 8000274:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1_Handle);
 8000276:	4802      	ldr	r0, [pc, #8]	; (8000280 <I2C1_Init+0x2c>)
 8000278:	f000 fae2 	bl	8000840 <I2C_Init>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	2000002c 	.word	0x2000002c
 8000284:	40005400 	.word	0x40005400
 8000288:	000186a0 	.word	0x000186a0

0800028c <GPIO_ButtonInit>:

void GPIO_ButtonInit() {
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	GPIOBtn.pGPIOX = GPIOA;
 8000292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000296:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000298:	2300      	movs	r3, #0
 800029a:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029c:	2300      	movs	r3, #0
 800029e:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a0:	2302      	movs	r3, #2
 80002a2:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a4:	2300      	movs	r3, #0
 80002a6:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f850 	bl	8000350 <GPIO_Init>
}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <main>:

int main(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	GPIO_ButtonInit();
 80002bc:	f7ff ffe6 	bl	800028c <GPIO_ButtonInit>
	// i2c pin init
	I2C1_GPIOInit();
 80002c0:	f7ff ffa6 	bl	8000210 <I2C1_GPIOInit>

	// i2c peripheral configuration
	I2C1_Init();
 80002c4:	f7ff ffc6 	bl	8000254 <I2C1_Init>

	// wait for button press
	while (1) {
		// wait until button is pressed
		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0))
 80002c8:	bf00      	nop
 80002ca:	2100      	movs	r1, #0
 80002cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d0:	f000 fa56 	bl	8000780 <GPIO_ReadFromInputPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f7      	beq.n	80002ca <main+0x12>
			;

		// handle button de-bounce trouble
		delay();
 80002da:	f7ff ff83 	bl	80001e4 <delay>

		I2C_MasterSendData(&I2C1_Handle, someData, strlen((char*) someData), 0x68);
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <main+0x3c>)
 80002e0:	f7ff ff78 	bl	80001d4 <strlen>
 80002e4:	4602      	mov	r2, r0
 80002e6:	2368      	movs	r3, #104	; 0x68
 80002e8:	4902      	ldr	r1, [pc, #8]	; (80002f4 <main+0x3c>)
 80002ea:	4803      	ldr	r0, [pc, #12]	; (80002f8 <main+0x40>)
 80002ec:	f000 fb13 	bl	8000916 <I2C_MasterSendData>
		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0))
 80002f0:	e7ea      	b.n	80002c8 <main+0x10>
 80002f2:	bf00      	nop
 80002f4:	20000000 	.word	0x20000000
 80002f8:	2000002c 	.word	0x2000002c

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 fb53 	bl	80009d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffc3 	bl	80002b8 <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000340:	08000a3c 	.word	0x08000a3c
  ldr r2, =_sbss
 8000344:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000348:	20000038 	.word	0x20000038

0800034c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC1_2_IRQHandler>
	...

08000350 <GPIO_Init>:
 *      Author: kana
 */

#include "stm32f303xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOX, ENABLE);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2101      	movs	r1, #1
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f96e 	bl	8000644 <GPIO_PeriClockControl>

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_ANALOG && pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_IN) {
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	795b      	ldrb	r3, [r3, #5]
 800036c:	2b02      	cmp	r3, #2
 800036e:	d81f      	bhi.n	80003b0 <GPIO_Init+0x60>
		// non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	795b      	ldrb	r3, [r3, #5]
 8000374:	461a      	mov	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	fa02 f303 	lsl.w	r3, r2, r3
 8000380:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOX->MODER &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	791b      	ldrb	r3, [r3, #4]
 800038c:	4619      	mov	r1, r3
 800038e:	230b      	movs	r3, #11
 8000390:	408b      	lsls	r3, r1
 8000392:	43db      	mvns	r3, r3
 8000394:	4619      	mov	r1, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	400a      	ands	r2, r1
 800039c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOX->MODER |= temp;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	6819      	ldr	r1, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	430a      	orrs	r2, r1
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	e0a2      	b.n	80004f6 <GPIO_Init+0x1a6>
	} else {
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	795b      	ldrb	r3, [r3, #5]
 80003b4:	2b04      	cmp	r3, #4
 80003b6:	d117      	bne.n	80003e8 <GPIO_Init+0x98>
			// 1. Configure the falling trigger selection register
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003b8:	4b9a      	ldr	r3, [pc, #616]	; (8000624 <GPIO_Init+0x2d4>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	7912      	ldrb	r2, [r2, #4]
 80003c0:	4611      	mov	r1, r2
 80003c2:	2201      	movs	r2, #1
 80003c4:	408a      	lsls	r2, r1
 80003c6:	4611      	mov	r1, r2
 80003c8:	4a96      	ldr	r2, [pc, #600]	; (8000624 <GPIO_Init+0x2d4>)
 80003ca:	430b      	orrs	r3, r1
 80003cc:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ce:	4b95      	ldr	r3, [pc, #596]	; (8000624 <GPIO_Init+0x2d4>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	7912      	ldrb	r2, [r2, #4]
 80003d6:	4611      	mov	r1, r2
 80003d8:	2201      	movs	r2, #1
 80003da:	408a      	lsls	r2, r1
 80003dc:	43d2      	mvns	r2, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a90      	ldr	r2, [pc, #576]	; (8000624 <GPIO_Init+0x2d4>)
 80003e2:	400b      	ands	r3, r1
 80003e4:	6093      	str	r3, [r2, #8]
 80003e6:	e035      	b.n	8000454 <GPIO_Init+0x104>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	2b05      	cmp	r3, #5
 80003ee:	d117      	bne.n	8000420 <GPIO_Init+0xd0>
			// 1. Configure the raising trigger selection register
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f0:	4b8c      	ldr	r3, [pc, #560]	; (8000624 <GPIO_Init+0x2d4>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	7912      	ldrb	r2, [r2, #4]
 80003f8:	4611      	mov	r1, r2
 80003fa:	2201      	movs	r2, #1
 80003fc:	408a      	lsls	r2, r1
 80003fe:	4611      	mov	r1, r2
 8000400:	4a88      	ldr	r2, [pc, #544]	; (8000624 <GPIO_Init+0x2d4>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6093      	str	r3, [r2, #8]

			// clear the corresponding rtsr bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000406:	4b87      	ldr	r3, [pc, #540]	; (8000624 <GPIO_Init+0x2d4>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	7912      	ldrb	r2, [r2, #4]
 800040e:	4611      	mov	r1, r2
 8000410:	2201      	movs	r2, #1
 8000412:	408a      	lsls	r2, r1
 8000414:	43d2      	mvns	r2, r2
 8000416:	4611      	mov	r1, r2
 8000418:	4a82      	ldr	r2, [pc, #520]	; (8000624 <GPIO_Init+0x2d4>)
 800041a:	400b      	ands	r3, r1
 800041c:	60d3      	str	r3, [r2, #12]
 800041e:	e019      	b.n	8000454 <GPIO_Init+0x104>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	795b      	ldrb	r3, [r3, #5]
 8000424:	2b06      	cmp	r3, #6
 8000426:	d115      	bne.n	8000454 <GPIO_Init+0x104>
			// 1. Configure both falling and raising trigger selection registers
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000428:	4b7e      	ldr	r3, [pc, #504]	; (8000624 <GPIO_Init+0x2d4>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	7912      	ldrb	r2, [r2, #4]
 8000430:	4611      	mov	r1, r2
 8000432:	2201      	movs	r2, #1
 8000434:	408a      	lsls	r2, r1
 8000436:	4611      	mov	r1, r2
 8000438:	4a7a      	ldr	r2, [pc, #488]	; (8000624 <GPIO_Init+0x2d4>)
 800043a:	430b      	orrs	r3, r1
 800043c:	60d3      	str	r3, [r2, #12]

			// clear the corresponding rtsr bit
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043e:	4b79      	ldr	r3, [pc, #484]	; (8000624 <GPIO_Init+0x2d4>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	7912      	ldrb	r2, [r2, #4]
 8000446:	4611      	mov	r1, r2
 8000448:	2201      	movs	r2, #1
 800044a:	408a      	lsls	r2, r1
 800044c:	4611      	mov	r1, r2
 800044e:	4a75      	ldr	r2, [pc, #468]	; (8000624 <GPIO_Init+0x2d4>)
 8000450:	430b      	orrs	r3, r1
 8000452:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	089b      	lsrs	r3, r3, #2
 800045a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	f003 0303 	and.w	r3, r3, #3
 8000464:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOX);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800046e:	d024      	beq.n	80004ba <GPIO_Init+0x16a>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a6c      	ldr	r2, [pc, #432]	; (8000628 <GPIO_Init+0x2d8>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d01d      	beq.n	80004b6 <GPIO_Init+0x166>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a6b      	ldr	r2, [pc, #428]	; (800062c <GPIO_Init+0x2dc>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d016      	beq.n	80004b2 <GPIO_Init+0x162>
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a69      	ldr	r2, [pc, #420]	; (8000630 <GPIO_Init+0x2e0>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d00f      	beq.n	80004ae <GPIO_Init+0x15e>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a68      	ldr	r2, [pc, #416]	; (8000634 <GPIO_Init+0x2e4>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d008      	beq.n	80004aa <GPIO_Init+0x15a>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a66      	ldr	r2, [pc, #408]	; (8000638 <GPIO_Init+0x2e8>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d101      	bne.n	80004a6 <GPIO_Init+0x156>
 80004a2:	2305      	movs	r3, #5
 80004a4:	e00a      	b.n	80004bc <GPIO_Init+0x16c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	e008      	b.n	80004bc <GPIO_Init+0x16c>
 80004aa:	2304      	movs	r3, #4
 80004ac:	e006      	b.n	80004bc <GPIO_Init+0x16c>
 80004ae:	2303      	movs	r3, #3
 80004b0:	e004      	b.n	80004bc <GPIO_Init+0x16c>
 80004b2:	2302      	movs	r3, #2
 80004b4:	e002      	b.n	80004bc <GPIO_Init+0x16c>
 80004b6:	2301      	movs	r3, #1
 80004b8:	e000      	b.n	80004bc <GPIO_Init+0x16c>
 80004ba:	2300      	movs	r3, #0
 80004bc:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004be:	4b5f      	ldr	r3, [pc, #380]	; (800063c <GPIO_Init+0x2ec>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a5e      	ldr	r2, [pc, #376]	; (800063c <GPIO_Init+0x2ec>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 3);
 80004ca:	7c79      	ldrb	r1, [r7, #17]
 80004cc:	7cba      	ldrb	r2, [r7, #18]
 80004ce:	4613      	mov	r3, r2
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	4413      	add	r3, r2
 80004d4:	4099      	lsls	r1, r3
 80004d6:	4a5a      	ldr	r2, [pc, #360]	; (8000640 <GPIO_Init+0x2f0>)
 80004d8:	7cfb      	ldrb	r3, [r7, #19]
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	6059      	str	r1, [r3, #4]

		// 3. enable the exti interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004e0:	4b50      	ldr	r3, [pc, #320]	; (8000624 <GPIO_Init+0x2d4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7912      	ldrb	r2, [r2, #4]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a4c      	ldr	r2, [pc, #304]	; (8000624 <GPIO_Init+0x2d4>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6013      	str	r3, [r2, #0]
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	799b      	ldrb	r3, [r3, #6]
 80004fa:	461a      	mov	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->OSPEEDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	4619      	mov	r1, r3
 8000514:	230b      	movs	r3, #11
 8000516:	408b      	lsls	r3, r1
 8000518:	43db      	mvns	r3, r3
 800051a:	4619      	mov	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	400a      	ands	r2, r1
 8000522:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDR |= temp;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6899      	ldr	r1, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	430a      	orrs	r2, r1
 8000532:	609a      	str	r2, [r3, #8]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	79db      	ldrb	r3, [r3, #7]
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->PUPDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	68da      	ldr	r2, [r3, #12]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	4619      	mov	r1, r3
 8000552:	230b      	movs	r3, #11
 8000554:	408b      	lsls	r3, r1
 8000556:	43db      	mvns	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	400a      	ands	r2, r1
 8000560:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	68d9      	ldr	r1, [r3, #12]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	430a      	orrs	r2, r1
 8000570:	60da      	str	r2, [r3, #12]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // multiply by 2 because each pin takes 2 bit fields
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	79db      	ldrb	r3, [r3, #7]
 8000576:	461a      	mov	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOX->MODER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	4619      	mov	r1, r3
 800058e:	2301      	movs	r3, #1
 8000590:	408b      	lsls	r3, r1
 8000592:	43db      	mvns	r3, r3
 8000594:	4619      	mov	r1, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	400a      	ands	r2, r1
 800059c:	601a      	str	r2, [r3, #0]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6859      	ldr	r1, [r3, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	430a      	orrs	r2, r1
 80005ac:	605a      	str	r2, [r3, #4]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d131      	bne.n	800061a <GPIO_Init+0x2ca>
		// configure the alt function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOX->AFR[temp1] &= ~(0b1111 << (4 * temp2));
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	7c3a      	ldrb	r2, [r7, #16]
 80005ce:	3208      	adds	r2, #8
 80005d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	220f      	movs	r2, #15
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	43db      	mvns	r3, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	7c3a      	ldrb	r2, [r7, #16]
 80005e8:	4001      	ands	r1, r0
 80005ea:	3208      	adds	r2, #8
 80005ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOX->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	7c3a      	ldrb	r2, [r7, #16]
 80005f6:	3208      	adds	r2, #8
 80005f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	7a5b      	ldrb	r3, [r3, #9]
 8000600:	461a      	mov	r2, r3
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	4618      	mov	r0, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	7c3a      	ldrb	r2, [r7, #16]
 8000612:	4301      	orrs	r1, r0
 8000614:	3208      	adds	r2, #8
 8000616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010400 	.word	0x40010400
 8000628:	48000400 	.word	0x48000400
 800062c:	48000800 	.word	0x48000800
 8000630:	48000c00 	.word	0x48000c00
 8000634:	48001000 	.word	0x48001000
 8000638:	48001400 	.word	0x48001400
 800063c:	40021000 	.word	0x40021000
 8000640:	40010000 	.word	0x40010000

08000644 <GPIO_PeriClockControl>:
//
// @brief - this function enables or disables peripheral clock for the given GPIO port
// @pGPIOx -  base address of the GPIO peripheral
// @EnOrDi - ENABLE or DISABLE macros
//
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d141      	bne.n	80006da <GPIO_PeriClockControl+0x96>
		if (pGPIOx == GPIOA) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800065c:	d106      	bne.n	800066c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800065e:	4b42      	ldr	r3, [pc, #264]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a41      	ldr	r2, [pc, #260]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	6153      	str	r3, [r2, #20]
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 800066a:	e077      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a3f      	ldr	r2, [pc, #252]	; (800076c <GPIO_PeriClockControl+0x128>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d106      	bne.n	8000682 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000674:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a3b      	ldr	r2, [pc, #236]	; (8000768 <GPIO_PeriClockControl+0x124>)
 800067a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067e:	6153      	str	r3, [r2, #20]
}
 8000680:	e06c      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a3a      	ldr	r2, [pc, #232]	; (8000770 <GPIO_PeriClockControl+0x12c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d106      	bne.n	8000698 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <GPIO_PeriClockControl+0x124>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a36      	ldr	r2, [pc, #216]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000694:	6153      	str	r3, [r2, #20]
}
 8000696:	e061      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a36      	ldr	r2, [pc, #216]	; (8000774 <GPIO_PeriClockControl+0x130>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d106      	bne.n	80006ae <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80006a0:	4b31      	ldr	r3, [pc, #196]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a30      	ldr	r2, [pc, #192]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006aa:	6153      	str	r3, [r2, #20]
}
 80006ac:	e056      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a31      	ldr	r2, [pc, #196]	; (8000778 <GPIO_PeriClockControl+0x134>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a2b      	ldr	r2, [pc, #172]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c0:	6153      	str	r3, [r2, #20]
}
 80006c2:	e04b      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a2d      	ldr	r2, [pc, #180]	; (800077c <GPIO_PeriClockControl+0x138>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d147      	bne.n	800075c <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_EN();
 80006cc:	4b26      	ldr	r3, [pc, #152]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a25      	ldr	r2, [pc, #148]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d6:	6153      	str	r3, [r2, #20]
}
 80006d8:	e040      	b.n	800075c <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006e0:	d106      	bne.n	80006f0 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a20      	ldr	r2, [pc, #128]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006ec:	6153      	str	r3, [r2, #20]
}
 80006ee:	e035      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a1e      	ldr	r2, [pc, #120]	; (800076c <GPIO_PeriClockControl+0x128>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	4a1a      	ldr	r2, [pc, #104]	; (8000768 <GPIO_PeriClockControl+0x124>)
 80006fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000702:	6153      	str	r3, [r2, #20]
}
 8000704:	e02a      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <GPIO_PeriClockControl+0x12c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000714:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000718:	6153      	str	r3, [r2, #20]
}
 800071a:	e01f      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <GPIO_PeriClockControl+0x130>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d106      	bne.n	8000732 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <GPIO_PeriClockControl+0x124>)
 800072a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800072e:	6153      	str	r3, [r2, #20]
}
 8000730:	e014      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <GPIO_PeriClockControl+0x134>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d106      	bne.n	8000748 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <GPIO_PeriClockControl+0x124>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000740:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000744:	6153      	str	r3, [r2, #20]
}
 8000746:	e009      	b.n	800075c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a0c      	ldr	r2, [pc, #48]	; (800077c <GPIO_PeriClockControl+0x138>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d105      	bne.n	800075c <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_DI();
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <GPIO_PeriClockControl+0x124>)
 8000756:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800075a:	6153      	str	r3, [r2, #20]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	40021000 	.word	0x40021000
 800076c:	48000400 	.word	0x48000400
 8000770:	48000800 	.word	0x48000800
 8000774:	48000c00 	.word	0x48000c00
 8000778:	48001000 	.word	0x48001000
 800077c:	48001400 	.word	0x48001400

08000780 <GPIO_ReadFromInputPin>:

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = pGPIOx->IDR >> PinNumber & 0x00000001;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	691a      	ldr	r2, [r3, #16]
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	fa22 f303 	lsr.w	r3, r2, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]

	return value;
 800079e:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <I2C_MasterAddressPhaseInit>:

static void I2C_MasterAddressPhaseInit(I2C_Handle_t *pI2CHandle, uint32_t dataLength, uint8_t slaveAddr, uint8_t readWrite);
static void I2C_GenerateStart(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStop(I2C_RegDef_t *pI2Cx);

static void I2C_MasterAddressPhaseInit(I2C_Handle_t *pI2CHandle, uint32_t dataLength, uint8_t slaveAddr, uint8_t readWrite) {
 80007ac:	b480      	push	{r7}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	4611      	mov	r1, r2
 80007b8:	461a      	mov	r2, r3
 80007ba:	460b      	mov	r3, r1
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	4613      	mov	r3, r2
 80007c0:	71bb      	strb	r3, [r7, #6]
	uint32_t tempreg = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
	// 1. set addressing mode
	tempreg |= (0 << I2C_CR2_ADD10);

	// 2. set slave address
	tempreg |= (slaveAddr << I2C_CR2_SADD);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	617b      	str	r3, [r7, #20]

	// 3. set number of bytes to be addressed
	tempreg |= (dataLength << I2C_CR2_NBYTES);
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	041b      	lsls	r3, r3, #16
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]

	// 4. set read or write master mode
	tempreg |= (readWrite << I2C_CR2_RD_WRN);
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	029b      	lsls	r3, r3, #10
 80007dc:	461a      	mov	r2, r3
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]

	pI2CHandle->pI2Cx->CR2 |= tempreg;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6859      	ldr	r1, [r3, #4]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	430a      	orrs	r2, r1
 80007f2:	605a      	str	r2, [r3, #4]
}
 80007f4:	bf00      	nop
 80007f6:	371c      	adds	r7, #28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <I2C_GenerateStart>:

static void I2C_GenerateStart(I2C_RegDef_t *pI2Cx) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
   pI2Cx->CR2 |= (1 << I2C_CR2_START);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	605a      	str	r2, [r3, #4]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <I2C_GenerateStop>:

static void I2C_GenerateStop(I2C_RegDef_t *pI2Cx) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
   pI2Cx->CR1 |= (1 << I2C_CR2_STOP);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	601a      	str	r2, [r3, #0]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <I2C_Init>:
			I2C2_PCLK_DI();
		}
	}
}

void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]

	// config has to be set with 0 in the PE bit of the CR1 register

	// enable acknowledge
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_SBC;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7a5b      	ldrb	r3, [r3, #9]
 8000850:	041b      	lsls	r3, r3, #16
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4313      	orrs	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	601a      	str	r2, [r3, #0]

	tempreg = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
	tempreg |= ~pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR2_NACK;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	7a5b      	ldrb	r3, [r3, #9]
 800086a:	43db      	mvns	r3, r3
 800086c:	03db      	lsls	r3, r3, #15
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4313      	orrs	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = tempreg;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	605a      	str	r2, [r3, #4]

	// program the device own address
	tempreg = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_OA1;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	7a1b      	ldrb	r3, [r3, #8]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	461a      	mov	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4313      	orrs	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << I2C_OAR1_OA1EN;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7a5b      	ldrb	r3, [r3, #9]
 8000894:	03db      	lsls	r3, r3, #15
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4313      	orrs	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	609a      	str	r2, [r3, #8]

	// config timings
	// all config below are for the 100kHz timing, and fI2CCLK = 8MHz. Configs were taken from the user manual
	tempreg = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
	tempreg |= 1 << I2C_TIMINGR_PRESC;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	60fb      	str	r3, [r7, #12]
	tempreg |= 0x13 << I2C_TIMINGR_SCLL;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f043 0313 	orr.w	r3, r3, #19
 80008b8:	60fb      	str	r3, [r7, #12]
	tempreg |= 0xF << I2C_TIMINGR_SCLH;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80008c0:	60fb      	str	r3, [r7, #12]
	tempreg |= 0x2 << I2C_TIMINGR_SDADEL;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TIMINGR = tempreg;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	611a      	str	r2, [r3, #16]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <I2C_PeripheralControl>:
	} else {
		RCC->APB1RSTR |= (1 << I2C2_RESET_OFFSET);
	}
}

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t enOrDi) {
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70fb      	strb	r3, [r7, #3]
	if (enOrDi == ENABLE) {
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d106      	bne.n	80008fe <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f043 0201 	orr.w	r2, r3, #1
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 80008fc:	e005      	b.n	800090a <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f023 0201 	bic.w	r2, r3, #1
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <I2C_MasterSendData>:

// this method is implemented only for the data length <= 255 bytes
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t length, uint8_t slaveAddr) {
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	70fb      	strb	r3, [r7, #3]
	// 1. address phase
	I2C_MasterAddressPhaseInit(pI2CHandle, length, slaveAddr, I2C_MASTER_WRITE_MODE);
 8000924:	78fa      	ldrb	r2, [r7, #3]
 8000926:	2300      	movs	r3, #0
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ff3e 	bl	80007ac <I2C_MasterAddressPhaseInit>

	// 2. generate start condition
	I2C_GenerateStart(pI2CHandle->pI2Cx);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff63 	bl	8000800 <I2C_GenerateStart>

	// 3. wait until bus is free to use
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ISR_BUSY));
 800093a:	bf00      	nop
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	210f      	movs	r1, #15
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f831 	bl	80009aa <I2C_GetFlagStatus>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0f6      	beq.n	800093c <I2C_MasterSendData+0x26>
	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffc2 	bl	80008de <I2C_PeripheralControl>

	// 4. wait until data register is empty
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ISR_TXIS));
 800095a:	bf00      	nop
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2101      	movs	r1, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f821 	bl	80009aa <I2C_GetFlagStatus>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f6      	beq.n	800095c <I2C_MasterSendData+0x46>

	// 5. send data
	pI2CHandle->pI2Cx->TXDR = *pTxBuffer;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	629a      	str	r2, [r3, #40]	; 0x28

	// 6. wait until transfer is complete
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ISR_TC));
 8000978:	bf00      	nop
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2106      	movs	r1, #6
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f812 	bl	80009aa <I2C_GetFlagStatus>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f6      	beq.n	800097a <I2C_MasterSendData+0x64>

	// 7. generate stop
	I2C_GenerateStop(pI2CHandle->pI2Cx);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff45 	bl	8000820 <I2C_GenerateStop>

	// 8. release peripheral
	I2C_PeripheralControl(pI2CHandle->pI2Cx, DISABLE);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff9e 	bl	80008de <I2C_PeripheralControl>
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <I2C_GetFlagStatus>:


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t flagName) {
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
	if (pI2Cx->ISR & flagName) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	699a      	ldr	r2, [r3, #24]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <I2C_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <__libc_init_array>:
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	4d0d      	ldr	r5, [pc, #52]	; (8000a0c <__libc_init_array+0x38>)
 80009d8:	4c0d      	ldr	r4, [pc, #52]	; (8000a10 <__libc_init_array+0x3c>)
 80009da:	1b64      	subs	r4, r4, r5
 80009dc:	10a4      	asrs	r4, r4, #2
 80009de:	2600      	movs	r6, #0
 80009e0:	42a6      	cmp	r6, r4
 80009e2:	d109      	bne.n	80009f8 <__libc_init_array+0x24>
 80009e4:	4d0b      	ldr	r5, [pc, #44]	; (8000a14 <__libc_init_array+0x40>)
 80009e6:	4c0c      	ldr	r4, [pc, #48]	; (8000a18 <__libc_init_array+0x44>)
 80009e8:	f000 f818 	bl	8000a1c <_init>
 80009ec:	1b64      	subs	r4, r4, r5
 80009ee:	10a4      	asrs	r4, r4, #2
 80009f0:	2600      	movs	r6, #0
 80009f2:	42a6      	cmp	r6, r4
 80009f4:	d105      	bne.n	8000a02 <__libc_init_array+0x2e>
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fc:	4798      	blx	r3
 80009fe:	3601      	adds	r6, #1
 8000a00:	e7ee      	b.n	80009e0 <__libc_init_array+0xc>
 8000a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a06:	4798      	blx	r3
 8000a08:	3601      	adds	r6, #1
 8000a0a:	e7f2      	b.n	80009f2 <__libc_init_array+0x1e>
 8000a0c:	08000a34 	.word	0x08000a34
 8000a10:	08000a34 	.word	0x08000a34
 8000a14:	08000a34 	.word	0x08000a34
 8000a18:	08000a38 	.word	0x08000a38

08000a1c <_init>:
 8000a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1e:	bf00      	nop
 8000a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a22:	bc08      	pop	{r3}
 8000a24:	469e      	mov	lr, r3
 8000a26:	4770      	bx	lr

08000a28 <_fini>:
 8000a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2a:	bf00      	nop
 8000a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2e:	bc08      	pop	{r3}
 8000a30:	469e      	mov	lr, r3
 8000a32:	4770      	bx	lr
