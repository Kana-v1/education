
stm32f3xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000648  08000650  00010650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000648  08000648  00010650  2**0
                  CONTENTS
  4 .ARM          00000000  08000648  08000648  00010650  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000648  08000650  00010650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000648  08000648  00010648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800064c  0800064c  0001064c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010650  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010650  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007eb  00000000  00000000  00010680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000022b  00000000  00000000  00010e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00011098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00011150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012ab  00000000  00000000  000111e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c37  00000000  00000000  0001248b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004d9f  00000000  00000000  000130c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00017e61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  00017eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000630 	.word	0x08000630

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000630 	.word	0x08000630

080001d4 <delay>:
#include "stm32f303xx.h"

#define HIGH 1
#define BTN_PRESSED HIGH

void delay(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000 / 2; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	0003d08f 	.word	0x0003d08f

08000200 <main>:

int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLED, GPIOBtn;
	GpioLED.pGPIOX = GPIOE;
 8000206:	4b1c      	ldr	r3, [pc, #112]	; (8000278 <main+0x78>)
 8000208:	60fb      	str	r3, [r7, #12]
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 800020a:	230b      	movs	r3, #11
 800020c:	743b      	strb	r3, [r7, #16]
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800020e:	2301      	movs	r3, #1
 8000210:	747b      	strb	r3, [r7, #17]
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	74bb      	strb	r3, [r7, #18]
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000216:	2301      	movs	r3, #1
 8000218:	753b      	strb	r3, [r7, #20]
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021a:	2300      	movs	r3, #0
 800021c:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOE, ENABLE);
 800021e:	2101      	movs	r1, #1
 8000220:	4815      	ldr	r0, [pc, #84]	; (8000278 <main+0x78>)
 8000222:	f000 f917 	bl	8000454 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLED);
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f84f 	bl	80002ce <GPIO_Init>


	GPIOBtn.pGPIOX = GPIOA;
 8000230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000234:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000236:	2300      	movs	r3, #0
 8000238:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800023a:	2300      	movs	r3, #0
 800023c:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000246:	2101      	movs	r1, #1
 8000248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024c:	f000 f902 	bl	8000454 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 8000250:	463b      	mov	r3, r7
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f83b 	bl	80002ce <GPIO_Init>

	while(1) {
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED) {
 8000258:	2100      	movs	r1, #0
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f000 f997 	bl	8000590 <GPIO_ReadFromInputPin>
 8000262:	4603      	mov	r3, r0
 8000264:	2b01      	cmp	r3, #1
 8000266:	d1f7      	bne.n	8000258 <main+0x58>
			delay();
 8000268:	f7ff ffb4 	bl	80001d4 <delay>
			GPIO_ToggleOutputPin(GPIOE, GPIO_PIN_NO_11);
 800026c:	210b      	movs	r1, #11
 800026e:	4802      	ldr	r0, [pc, #8]	; (8000278 <main+0x78>)
 8000270:	f000 f9a4 	bl	80005bc <GPIO_ToggleOutputPin>
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED) {
 8000274:	e7f0      	b.n	8000258 <main+0x58>
 8000276:	bf00      	nop
 8000278:	48001000 	.word	0x48001000

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 f99d 	bl	80005e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ffa7 	bl	8000200 <main>

080002b2 <LoopForever>:

LoopForever:
  b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	08000650 	.word	0x08000650
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	2000001c 	.word	0x2000001c

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>

080002ce <GPIO_Init>:
 *      Author: kana
 */

#include "stm32f303xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80002ce:	b480      	push	{r7}
 80002d0:	b085      	sub	sp, #20
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_ANALOG && pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_IN) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	795b      	ldrb	r3, [r3, #5]
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d81e      	bhi.n	8000320 <GPIO_Init+0x52>
		// non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	795b      	ldrb	r3, [r3, #5]
 80002e6:	461a      	mov	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	fa02 f303 	lsl.w	r3, r2, r3
 80002f2:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOX->MODER &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	791b      	ldrb	r3, [r3, #4]
 80002fe:	4619      	mov	r1, r3
 8000300:	230b      	movs	r3, #11
 8000302:	408b      	lsls	r3, r1
 8000304:	43db      	mvns	r3, r3
 8000306:	4619      	mov	r1, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	400a      	ands	r2, r1
 800030e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOX->MODER |= temp;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	6819      	ldr	r1, [r3, #0]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	430a      	orrs	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
	} else {
		// interrupt mode
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	799b      	ldrb	r3, [r3, #6]
 8000324:	461a      	mov	r2, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	fa02 f303 	lsl.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->OSPEEDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	689a      	ldr	r2, [r3, #8]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	791b      	ldrb	r3, [r3, #4]
 800033c:	4619      	mov	r1, r3
 800033e:	230b      	movs	r3, #11
 8000340:	408b      	lsls	r3, r1
 8000342:	43db      	mvns	r3, r3
 8000344:	4619      	mov	r1, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	400a      	ands	r2, r1
 800034c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDR |= temp;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	6899      	ldr	r1, [r3, #8]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	430a      	orrs	r2, r1
 800035c:	609a      	str	r2, [r3, #8]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiply by 2 because each pin takes 2 bit fields
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	79db      	ldrb	r3, [r3, #7]
 8000362:	461a      	mov	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	791b      	ldrb	r3, [r3, #4]
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->PUPDR &= ~(11 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	68da      	ldr	r2, [r3, #12]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	4619      	mov	r1, r3
 800037c:	230b      	movs	r3, #11
 800037e:	408b      	lsls	r3, r1
 8000380:	43db      	mvns	r3, r3
 8000382:	4619      	mov	r1, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	400a      	ands	r2, r1
 800038a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	68d9      	ldr	r1, [r3, #12]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	430a      	orrs	r2, r1
 800039a:	60da      	str	r2, [r3, #12]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // multiply by 2 because each pin takes 2 bit fields
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	79db      	ldrb	r3, [r3, #7]
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	791b      	ldrb	r3, [r3, #4]
 80003a6:	fa02 f303 	lsl.w	r3, r2, r3
 80003aa:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->MODER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	791b      	ldrb	r3, [r3, #4]
 80003b6:	4619      	mov	r1, r3
 80003b8:	2301      	movs	r3, #1
 80003ba:	408b      	lsls	r3, r1
 80003bc:	43db      	mvns	r3, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	400a      	ands	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6859      	ldr	r1, [r3, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	430a      	orrs	r2, r1
 80003d6:	605a      	str	r2, [r3, #4]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d132      	bne.n	8000446 <GPIO_Init+0x178>
		// configure the alt function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	08db      	lsrs	r3, r3, #3
 80003e6:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	f003 0307 	and.w	r3, r3, #7
 80003f0:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOX->AFR[temp1] &= ~(1111 << (4 * temp2));
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	7afa      	ldrb	r2, [r7, #11]
 80003f8:	3208      	adds	r2, #8
 80003fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003fe:	7abb      	ldrb	r3, [r7, #10]
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	f240 4257 	movw	r2, #1111	; 0x457
 8000406:	fa02 f303 	lsl.w	r3, r2, r3
 800040a:	43db      	mvns	r3, r3
 800040c:	4618      	mov	r0, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	7afa      	ldrb	r2, [r7, #11]
 8000414:	4001      	ands	r1, r0
 8000416:	3208      	adds	r2, #8
 8000418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOX->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	7afa      	ldrb	r2, [r7, #11]
 8000422:	3208      	adds	r2, #8
 8000424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	7a5b      	ldrb	r3, [r3, #9]
 800042c:	461a      	mov	r2, r3
 800042e:	7abb      	ldrb	r3, [r7, #10]
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	fa02 f303 	lsl.w	r3, r2, r3
 8000436:	4618      	mov	r0, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	7afa      	ldrb	r2, [r7, #11]
 800043e:	4301      	orrs	r1, r0
 8000440:	3208      	adds	r2, #8
 8000442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <GPIO_PeriClockControl>:
//
// @brief - this function enables or disables peripheral clock for the given GPIO port
// @pGPIOx -  base address of the GPIO peripheral
// @EnOrDi - ENABLE or DISABLE macros
//
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d141      	bne.n	80004ea <GPIO_PeriClockControl+0x96>
		if (pGPIOx == GPIOA) {
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800046e:	4b42      	ldr	r3, [pc, #264]	; (8000578 <GPIO_PeriClockControl+0x124>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a41      	ldr	r2, [pc, #260]	; (8000578 <GPIO_PeriClockControl+0x124>)
 8000474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000478:	6153      	str	r3, [r2, #20]
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 800047a:	e077      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a3f      	ldr	r2, [pc, #252]	; (800057c <GPIO_PeriClockControl+0x128>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000484:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <GPIO_PeriClockControl+0x124>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a3b      	ldr	r2, [pc, #236]	; (8000578 <GPIO_PeriClockControl+0x124>)
 800048a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800048e:	6153      	str	r3, [r2, #20]
}
 8000490:	e06c      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a3a      	ldr	r2, [pc, #232]	; (8000580 <GPIO_PeriClockControl+0x12c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800049a:	4b37      	ldr	r3, [pc, #220]	; (8000578 <GPIO_PeriClockControl+0x124>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a36      	ldr	r2, [pc, #216]	; (8000578 <GPIO_PeriClockControl+0x124>)
 80004a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004a4:	6153      	str	r3, [r2, #20]
}
 80004a6:	e061      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a36      	ldr	r2, [pc, #216]	; (8000584 <GPIO_PeriClockControl+0x130>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80004b0:	4b31      	ldr	r3, [pc, #196]	; (8000578 <GPIO_PeriClockControl+0x124>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a30      	ldr	r2, [pc, #192]	; (8000578 <GPIO_PeriClockControl+0x124>)
 80004b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004ba:	6153      	str	r3, [r2, #20]
}
 80004bc:	e056      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a31      	ldr	r2, [pc, #196]	; (8000588 <GPIO_PeriClockControl+0x134>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d106      	bne.n	80004d4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <GPIO_PeriClockControl+0x124>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a2b      	ldr	r2, [pc, #172]	; (8000578 <GPIO_PeriClockControl+0x124>)
 80004cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d0:	6153      	str	r3, [r2, #20]
}
 80004d2:	e04b      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a2d      	ldr	r2, [pc, #180]	; (800058c <GPIO_PeriClockControl+0x138>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d147      	bne.n	800056c <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_EN();
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <GPIO_PeriClockControl+0x124>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a25      	ldr	r2, [pc, #148]	; (8000578 <GPIO_PeriClockControl+0x124>)
 80004e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e6:	6153      	str	r3, [r2, #20]
}
 80004e8:	e040      	b.n	800056c <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA) {
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80004f0:	d106      	bne.n	8000500 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <GPIO_PeriClockControl+0x124>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a20      	ldr	r2, [pc, #128]	; (8000578 <GPIO_PeriClockControl+0x124>)
 80004f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80004fc:	6153      	str	r3, [r2, #20]
}
 80004fe:	e035      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a1e      	ldr	r2, [pc, #120]	; (800057c <GPIO_PeriClockControl+0x128>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d106      	bne.n	8000516 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <GPIO_PeriClockControl+0x124>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a1a      	ldr	r2, [pc, #104]	; (8000578 <GPIO_PeriClockControl+0x124>)
 800050e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000512:	6153      	str	r3, [r2, #20]
}
 8000514:	e02a      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <GPIO_PeriClockControl+0x12c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d106      	bne.n	800052c <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <GPIO_PeriClockControl+0x124>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <GPIO_PeriClockControl+0x124>)
 8000524:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000528:	6153      	str	r3, [r2, #20]
}
 800052a:	e01f      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a15      	ldr	r2, [pc, #84]	; (8000584 <GPIO_PeriClockControl+0x130>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d106      	bne.n	8000542 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <GPIO_PeriClockControl+0x124>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <GPIO_PeriClockControl+0x124>)
 800053a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800053e:	6153      	str	r3, [r2, #20]
}
 8000540:	e014      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a10      	ldr	r2, [pc, #64]	; (8000588 <GPIO_PeriClockControl+0x134>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d106      	bne.n	8000558 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <GPIO_PeriClockControl+0x124>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <GPIO_PeriClockControl+0x124>)
 8000550:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000554:	6153      	str	r3, [r2, #20]
}
 8000556:	e009      	b.n	800056c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOF) {
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a0c      	ldr	r2, [pc, #48]	; (800058c <GPIO_PeriClockControl+0x138>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d105      	bne.n	800056c <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_DI();
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <GPIO_PeriClockControl+0x124>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <GPIO_PeriClockControl+0x124>)
 8000566:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800056a:	6153      	str	r3, [r2, #20]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000
 800057c:	48000400 	.word	0x48000400
 8000580:	48000800 	.word	0x48000800
 8000584:	48000c00 	.word	0x48000c00
 8000588:	48001000 	.word	0x48001000
 800058c:	48001400 	.word	0x48001400

08000590 <GPIO_ReadFromInputPin>:

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = pGPIOx->IDR >> PinNumber & 0x00000001;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	691a      	ldr	r2, [r3, #16]
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	fa22 f303 	lsr.w	r3, r2, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]

	return value;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <GPIO_ToggleOutputPin>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value) {
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	78fa      	ldrb	r2, [r7, #3]
 80005ce:	2101      	movs	r1, #1
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	405a      	eors	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	615a      	str	r2, [r3, #20]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <__libc_init_array>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	4d0d      	ldr	r5, [pc, #52]	; (8000620 <__libc_init_array+0x38>)
 80005ec:	4c0d      	ldr	r4, [pc, #52]	; (8000624 <__libc_init_array+0x3c>)
 80005ee:	1b64      	subs	r4, r4, r5
 80005f0:	10a4      	asrs	r4, r4, #2
 80005f2:	2600      	movs	r6, #0
 80005f4:	42a6      	cmp	r6, r4
 80005f6:	d109      	bne.n	800060c <__libc_init_array+0x24>
 80005f8:	4d0b      	ldr	r5, [pc, #44]	; (8000628 <__libc_init_array+0x40>)
 80005fa:	4c0c      	ldr	r4, [pc, #48]	; (800062c <__libc_init_array+0x44>)
 80005fc:	f000 f818 	bl	8000630 <_init>
 8000600:	1b64      	subs	r4, r4, r5
 8000602:	10a4      	asrs	r4, r4, #2
 8000604:	2600      	movs	r6, #0
 8000606:	42a6      	cmp	r6, r4
 8000608:	d105      	bne.n	8000616 <__libc_init_array+0x2e>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000610:	4798      	blx	r3
 8000612:	3601      	adds	r6, #1
 8000614:	e7ee      	b.n	80005f4 <__libc_init_array+0xc>
 8000616:	f855 3b04 	ldr.w	r3, [r5], #4
 800061a:	4798      	blx	r3
 800061c:	3601      	adds	r6, #1
 800061e:	e7f2      	b.n	8000606 <__libc_init_array+0x1e>
 8000620:	08000648 	.word	0x08000648
 8000624:	08000648 	.word	0x08000648
 8000628:	08000648 	.word	0x08000648
 800062c:	0800064c 	.word	0x0800064c

08000630 <_init>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	bf00      	nop
 8000634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000636:	bc08      	pop	{r3}
 8000638:	469e      	mov	lr, r3
 800063a:	4770      	bx	lr

0800063c <_fini>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	bf00      	nop
 8000640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000642:	bc08      	pop	{r3}
 8000644:	469e      	mov	lr, r3
 8000646:	4770      	bx	lr
