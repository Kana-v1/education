EC2(Elastic Compute Cloud) - the core of the web of Amazon Web Services. 
s3 - amazon objects store service
rds - relational database service

CloudWatch - тригерится если сервис падает, перегружен, etc. 
Он реагирует на метрики (использование CPU у EC2 серверов). 
Можно настроить на другие действия, помимо простого алярма.

SNS(Simple Notification Service) - напарник CloudWatch, которые пушит алерты на эндоинты. Имеет топик, на который подписывается смс, или мыло на которое нужно отправить нотификацию. Топики привязаны к региону и отправляют нотифаи только внутри своего региона. 


IAM (Identity and Access Managment service) - simple user and access managment. Это про секьюрность аккаунта 

================== 
VPC (Virtual Private Cloud) - позволяет создать виртауальный нетворк, в котором можно лаунчить ресурсы, и логически изолировать их от других VPC и внешнего мира (ec2 может лежать внутри впс)

Security Group - определяет пул айпишников, которые могут коннектиться к vpc, и к которым может коннектится vpc (файлвол на минималках), могут быть расшарены для нескольких VPC  

Routing Table - VPC использует таблицы роутинга(Routing Table) для конфигурации куда пойдет траффик от vpc. У каждого впс есть 1 таблица роутинга. 

Network Access Control List - проверяет какой айпишник пропустить, а  какой - нет, по сути грубый аналог Security Group

Хоть ресурсы внутри впс не могут взаимодействовать с внешним миром, внутри впс можно создавать сабнетворки (у каждого будет своя Routing Table и Network Access Control List), которые уже могут взаимодействовать друг с другом. Так, например, можно сделать публичный сабнетворк, который будет идти во внешний мир, и приватный который будет идти через публичный. 
 
 cidr block - the range of available IP addresses
 
 NAT Gateway - позволяет сущностям внутри впс взаимодействовать с внешним миром. Это можно сделать и без него если включить автонастройку ИП для новых сущностей внутри впс(network -> actions -> edit subnet settings -> enable auto assign public ipv4 address), но так секьюрнее (и дороже... намного дороже)
 
====================
Elastic Compute Cloud(ec2) - просто виртуалка, у которой есть память, цпу, нетворк. На нее можно установить любую ос.  
Amazon Machine Image (AMI) - операционная система и софт, который установлен в ес2. 
Elastic Block Store(EBS) - independent storage volumes used with ec2 instances. По сути память для ес2, которая еще и независимая(можно ее кидать с одного ес2 на другой)
 
Elastic ip - публичные ИП адреса, который создаются, уничтожаются и присваиваются автоматически. Позволяет достучаться до ес2 из внешнего мира без настройки "автоматическое назначение ип адресов" (elastic ip addresses -> actions -> associate elastic ip address)
 
Подключение с ес2 через ssh: ssh -i <per-file> ec2-user@<ec2-ip>; где ec2-user - default username to connect to the ec2 instance

======================
Auto Scaling Group -  увеличивает или уменьшает количетсов инстансов, основываясь на заранее определенных правилах. Чтобы его настроить дополнительно нужен балансировщик.

Target group - говорит балансировщику куда перекинуть траффик (ес2, ип и т.д.)

Создание AMI: ec2 -> instances -> actions -> images and templates -> create image

Creating a Load Balancer: ec2 -> load balancer -> create load balancer -> select(or create) secutiry group -> select(or create) target group 

Creating auto scaling group: ec2 -> auto scaling group -> create -> launch template -> (ami, instance type => advanced details -> insert script if need to start app immediatly after scaling) -> vpn -> subnets(all public) -> attach to load balancer -> target group

======================
S3(Simple Storage Service) - сервис для хранения файлов. 
Объект с3 состоит из метадаты и файла, файл может быть почти любого расширения и размера (до 5 тб, при этом максимальный размер файла для аплоада за раз - 5 гб)

Объекты лежат в бакетах. Бакеты можно хранить в разных регионах и, соответственно, будет разная урла для таких бакетов.  
По дефолту бакеты видят только тот акк, который создал его

Bucket permissions: для начала, при создании бакета нужно указать что может быть осуществлен публичный доступ. S3 -> buckets -> bucket -> permissions -> bucket policy -> edit -> policy generator -> principal (who able to access; to add another account enter Amazon Resource Name)

Файлы в с3 можно загружать через console(можно быстро загрузить небольшое количество файлов), CLI(чтобы загрузить целую папку), SDK

CLI: aws s3 cp <local_folder> s3://<bucket>/<remote_folder> --recursive --exclude "<pattern>". Через cli может грузить только админ

Чтобы включить CORS у s3: s3 -> bucket -> permissions -> CORS -> edit 

Identity and Access Management (IAM) - обеспечивает точный контроль доступа во всех сервисах AWS

Чтобы ес2 мог ходить в с3 используются AIM роли (вместо кредов при локальном сервере): ec2 -> instances -> actions -> create image; iam -> roles -> create role -> find s3 in policies; ec2 -> launch templates -> id -> actions -> modify template -> ami, advanced details ->  iam role -> create template; ec2 -> launch template -> choose version; можно в auto scaling group поменять версию темплейта если надо (по дефолту последний юзается); launch templates -> actions -> select default version; ec2 -> instances -> all instances created by auto scaling group(without names) -> instance state -> terminate instances 

======================
RDS(Relational Database Service) - бд которая менеджится через ес2

RDS под капотом для себя создается ес2, ставит ос и движок для ос. По дефолту рдс бекапится раз в день. У рдс есть Multi-AZ Deployment

Multi-AZ Deployment(az - avalability zone) - рдс сделает свою реплику в другой доступной зоне в том же регионе. Если зона упадет - бд переключится на другую зону.

Для простого создания и использования нет ничего сложного. RDS -> create database...


DynamoDB - notn-relational aws database. 
DynamoDB состоит из таблиц, которые в свою очередь состоят из айтемов(аля строки), но каждому айтему нужен пк(строка, число или бинарник).

Provision throughout capacity - количество операций в секунду для DynamoDB таблицы. В завивимости от величины этой характеристики aws выдает определенное количество хардварных ресурсов для таблицы.
Юнит для чтения/записи - 4кб. Если данных на 6кб - значит нужно 2 таких юнита. В зависимости от параметра Provision through capacity бд может долго выполнять запрос, или вообще дропнуть его. 

On-demand capacity mode - настроил реквайрменты и забыл, table capcacity scales as needed(with few limits). Намного дороже Provisioned Capacity Mode

Provision Capacity Auto Scaling Mode - уменьшает или увеличивает Provision Capacity основываясь на рулах. Рботает как EC2 Auto Scaling Group. 

======================
CloudFormation - сервис который позволяет создать и сконфигурировать ресурсы(базы данных, iam role, launch configuration, ec2  instances, roles, etc) на основании конфигурационных данных (template).

Stack - несколько таких ресурсов, которые создаются одним темплейтом

Обычно это yml файл который нужен если есть необходимость создавать ресурсы на разных vpc или акках. Просто в консоле 1 раз накликать такое проще. 

Stack creation: CloudFormation -> create stack -> upload a template file -> ami (ec2 -> AMIs -> copy ami id)

======================
Elastic Beanstalk - сервис для автоматизации деплоя

Elastic Beanstalk содержит саму апку, платформу на которой эта апка будет работать (питон, го, ...), и переменные окружения(ami, ec2 instances, auto scaling group, etc). Эти переменные могут быть разными чтобы разные версии апки деплоились по разному (например дев и прод). 

Elastic Beanstalk -> create app -> upload zip file -> ensure its inside vpc (check network -> edit -> select ur vpc -> select subnet with required ip(public for education) -> select available zones (all is ok)); edit intsances -> select sg; edit security -> select ur ec2 key pair -> select iam role -> save; edit capacity -> change enviroment type to load balanced -> save; edit load balanced -> change port to listen(processes -> select process -> actions -> edit -> change port -> save -> create app;

Чтобы такая апка работала нормально ей кроме своих доступов(s3, rds, dynamoDB) нужно к роли добавить AWSElasticBeanstalkWebTier policy (iam -> roles -> attach policy)

Еще нужно убедиться что rds похволяет коннектиться к нему из ec2 (rds -> databases -> select db -> vpc security groups -> inbound rules -> edit inbound rules -> add rule -> source -> select ur sg) -> restart ec2 instances (elastic beanstalk -> env -> actions -> restart app service; btw u can find url here)







 
 
