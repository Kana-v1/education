Kuber -> Nodes -> pods 

Nodes - сервер или вм. Несколько нодов = кластер

В каждом ноде есть под (Pod). Под - это способ захостить контейнер, обертка над контейнером (или контейнерами)

kubectl delete pod - застрелит под, но вернет его при необходимости(  kubectl get all вернет этот под но уже под другим ид)

kubectl delete deployment - удалит как этого все ожидают


yml: 
kind -> type kubernetes resource
spec -> specification about what is going on in this pod

kubecrl create --filename file.pod.yml

create or apply changes to a pod from yaml:
kubectl apply -f file.pod.yml

use --save-config when u want to use kubectl apply in the future. It will create annotation and check if new settigns override otherone that saved in annotaion (kubectl get pod <podName> -o yaml): 
kubectl create -f file.pod.yml --save-config

check pod history and basic info:
kubectl describe pod <podName>

run bash inside the pod:
kubecrl exec <podName> -it sh

pod health:
Probes определяет живой под или нет. Они (пробы) есть 2 видов:
 - Lineness probe - is it alive? 
 - Readiness probe - determine if a pod should receive requests
 
 RepicaSet - императивный способ управлять подами. 
 Deployment - декларативный(через yml) способ управлять подами через ReplicaSet под капотом
 
 Шо умеет реплика:
  - хилить поды
  - считает количество подов
  - provide fault-tolerance
  - может быть использована для того чтобы увеличить количество подов
  - полагается на pod template
Как результат, нет необходимости создавать поды напрямую, это можно делать через реплику и она часто используется для деплоя
 
 Шо делает Deployment:
 - управляет подами через реплику
 - скейлит реплику, а она скейлит поды
 - уменьшает время простоя до 0 при обновлениях тем что убивает и поднимает реплику
 - добавляет ролбек фичи
 - генерирует уникальный лейблы для реплик

create a deployment: 
 kubectl create -f file.deployment.yml --save-config
 
apply changes: 
 kubectl apply -f file.deployment.yml --save-config
 
 kubectl get deployment(s)
 
 kubectl get deployment --show-labels
 
 kubectl get deployment -l app=nginx
 
 kubectl delete deployment <deploymentName>
 
 Scale the deployment pods to 5: 
 Скейл == увеличить количество подов
 
kubectl scale deployment <deploymenName> --replicas=5 OR 
kubectl scale -f file.deployment.yml --replicas=5

Какие опции доступны для апдейта подов чтобы об этом не узнали конечные юзеры:
 - Rolling updates => поднимает под с новой версией, переключается на него и удаляет старый под. И так для каждого пода в кластере (kubectl apply -f file.deployment.yml)
 - Blue-green deployment
 - Canary deployments;
 - Rollbacks;
 

 
