MAIN COMPONENTS:

Node is a server (either virtual of physical)

Pod is the smallest unit of K8s. It is an abstraction over a container. Usually an app per pod. Each pod has its own internal ip address 

Service is basically static IP address that can be attached to the pod. Lifecycle of the pod and service are not connected. 

Ingress - gives domain to the pod. Actually routes traffic to the cluster

ConfigMap - external config of the application. Pod is connected to the ConfigMap and get data from the config that ConfigMap contains. Creds should not be put onto the ConfigMap. 

Secret - ConfigMap for the secret data (credentials usually). 

Volume - attach file to the pod (usually pod wants to save data to the volume to not to lose it pod has passed away). File can be saved either locally or remotely outside if K8s cluster.

Service has 2 functionalities: permanent ip address and load balancer.

StatefulSet - used to create a replica of the stateful pods (usually db). However, using the statefulSet might be hard, so the common practice is to host db outside the k8s.

Replicaset manages the replicas of a Pod.  

======================================================================================================================================================================================================

ARCHITECTURE:

Each node has to have 3 processes installed:
1) container runtime (docker usually)
2) Kubelet - starts a node with a container inside
3) Kube proxy - forwards the requests from services to pods

Master Nodes manage clusters and have 4 processes running on it:
1) API server - you use it you you wanna deploy new service, schedule new pods, etc
2) Scheduler - starts new pods 
3) Controller manager - detects cluster state changes (crushing, etc)
4) etcd - key-value store of a cluster state

======================================================================================================================================================================================================


SOME COMMANDS:

kubectl get pod/nodes/services

Kubectl create 

kubectl exec -it podname -- bin/bash - start terminal in the corresponding container 

kubectl apply -f filename.yml - run kubectl through the file 

Pods are created via the deployment abstraction. Deployment contains some config for creating pods.
 

======================================================================================================================================================================================================

CONFIGURATION FILE:

Service -> target port - which container's port should the service recognize as an app's port
Service -> port - application source port

======================================================================================================================================================================================================

NAMESPACE:

Namespace - virtual cluster inside of a k8s cluster

Default namespaces: 
1) kube-system  - do not tweak it in any way
2) kube-public - contains public data (configMap)
3) kube-node-lease - contains info about heartbeats of nodes
4) default - resources you create are located here

Volume and node cannot be created in the namespace


Kubens allows to change active namespace
======================================================================================================================================================================================================


INGRESS:

Domain name should be pointer to the entrypoint of the k8s cluster. 

Ingress can work only together with ingress controller which evaluates all the rules, manages redirections, etc.


======================================================================================================================================================================================================

HELM:

Helm is a package manager. 

Helm chart - a collection of yml files, that can start some new app (database, monitoring apps, etc)

Helm chart contains all necessary yml files and can be used to redeploy the same application for different k8s cluster environments

Helm chart structure:
Chart.yml - meta information about the chart
values.yml - values for the template files
charts/ - contains chart dependencies

Helm v3 does not have tiller 
======================================================================================================================================================================================================

VOLUMES:

Persistent volume claim claims a persistent volume for the application and specify some requirements. So a pod can choose the right one volume if there are more than 1 volumes.

ConfigMap and Secret are mounted the same way with the PVC  

You can use use different volumes simultaneously (configMap, secret, PVC, etc)

Storage class creates provision volumes automatically through the PVC
 
======================================================================================================================================================================================================
If you're using StatefulSet there are master instance that can both read and write. And slave instances that can only read

However, all instances use different physical storages.














